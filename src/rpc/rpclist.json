[{"category":"Addressindex","calls":[{"name":"getaddressbalance","args":"{\"addresses\": [\"taddr\", ...]}","summary":"Returns the balance for addresses.","help":"getaddressbalance {\"addresses\": [\"taddr\", ...]}\n\nReturns the balance for addresses.\n\nWARNING: getaddressbalance is disabled.\nTo enable it, restart zcashd with the following command line options:\n-experimentalfeatures and -insightexplorer or:\n-experimentalfeatures and -lightwalletd\n\nAlternatively add these two lines to the zcash.conf file:\n\nexperimentalfeatures=1\ninsightexplorer=1\n\nor:\n\nexperimentalfeatures=1\nlightwalletd=1\n\nArguments:\n{\n  \"addresses\":\n    [\n      \"address\"  (string) The base58check encoded address\n      ,...\n    ]\n}\n(or)\n\"address\"  (string) The base58check encoded address\n\nResult:\n{\n  \"balance\"  (string) The current balance in zatoshis\n  \"received\"  (string) The total number of zatoshis received (including change)\n}\n\nExamples:\n> zcash-cli getaddressbalance '{\"addresses\": [\"tmYXBYJj1K7vhejSec5osXK2QsGa5MTisUQ\"]}'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaddressbalance\", \"params\": [{\"addresses\": [\"tmYXBYJj1K7vhejSec5osXK2QsGa5MTisUQ\"]}] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"getaddressdeltas","args":"{\"addresses\": [\"taddr\", ...], (\"start\": n), (\"end\": n), (\"chainInfo\": true|false)}","summary":"Returns all changes for an address.","help":"getaddressdeltas {\"addresses\": [\"taddr\", ...], (\"start\": n), (\"end\": n), (\"chainInfo\": true|false)}\n\nReturns all changes for an address.\n\nReturns information about all changes to the given transparent addresses within the given (inclusive)\n\nblock height range, default is the full blockchain.\n\nWARNING: getaddressdeltas is disabled.\nTo enable it, restart zcashd with the following command line options:\n-experimentalfeatures and -insightexplorer or:\n-experimentalfeatures and -lightwalletd\n\nAlternatively add these two lines to the zcash.conf file:\n\nexperimentalfeatures=1\ninsightexplorer=1\n\nor:\n\nexperimentalfeatures=1\nlightwalletd=1\n\nArguments:\n{\n  \"addresses\":\n    [\n      \"address\" (string) The base58check encoded address\n      ,...\n    ]\n  \"start\"       (number, optional) The start block height\n  \"end\"         (number, optional) The end block height\n  \"chainInfo\"   (boolean, optional, default=false) Include chain info in results, only applies if start and end specified\n}\n(or)\n\"address\"       (string) The base58check encoded address\n\nResult:\n[\n  {\n    \"satoshis\"  (number) The difference of zatoshis\n    \"txid\"      (string) The related txid\n    \"index\"     (number) The related input or output index\n    \"height\"    (number) The block height\n    \"address\"   (string) The base58check encoded address\n  }, ...\n]\n\n(or, if chainInfo is true):\n\n{\n  \"deltas\":\n    [\n      {\n        \"satoshis\"    (number) The difference of zatoshis\n        \"txid\"        (string) The related txid\n        \"index\"       (number) The related input or output index\n        \"height\"      (number) The block height\n        \"address\"     (string)  The address base58check encoded\n      }, ...\n    ],\n  \"start\":\n    {\n      \"hash\"          (string)  The start block hash\n      \"height\"        (numeric) The height of the start block\n    }\n  \"end\":\n    {\n      \"hash\"          (string)  The end block hash\n      \"height\"        (numeric) The height of the end block\n    }\n}\n\nExamples:\n> zcash-cli getaddressdeltas '{\"addresses\": [\"tmYXBYJj1K7vhejSec5osXK2QsGa5MTisUQ\"], \"start\": 1000, \"end\": 2000, \"chainInfo\": true}'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaddressdeltas\", \"params\": [{\"addresses\": [\"tmYXBYJj1K7vhejSec5osXK2QsGa5MTisUQ\"], \"start\": 1000, \"end\": 2000, \"chainInfo\": true}] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"getaddressmempool","args":"{\"addresses\": [\"taddr\", ...]}","summary":"Returns all mempool deltas for an address.","help":"getaddressmempool {\"addresses\": [\"taddr\", ...]}\n\nReturns all mempool deltas for an address.\n\nWARNING: getaddressmempool is disabled.\nTo enable it, restart zcashd with the following command line options:\n-experimentalfeatures and -insightexplorer or:\n-experimentalfeatures and -lightwalletd\n\nAlternatively add these two lines to the zcash.conf file:\n\nexperimentalfeatures=1\ninsightexplorer=1\n\nor:\n\nexperimentalfeatures=1\nlightwalletd=1\n\nArguments:\n{\n  \"addresses\":\n    [\n      \"address\"  (string) The base58check encoded address\n      ,...\n    ]\n}\n(or)\n\"address\"  (string) The base58check encoded address\n\nResult:\n[\n  {\n    \"address\"  (string) The base58check encoded address\n    \"txid\"  (string) The related txid\n    \"index\"  (number) The related input or output index\n    \"satoshis\"  (number) The difference of zatoshis\n    \"timestamp\"  (number) The time the transaction entered the mempool (seconds)\n    \"prevtxid\"  (string) The previous txid (if spending)\n    \"prevout\"  (string) The previous transaction output index (if spending)\n  }\n]\n\nExamples:\n> zcash-cli getaddressmempool '{\"addresses\": [\"tmYXBYJj1K7vhejSec5osXK2QsGa5MTisUQ\"]}'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaddressmempool\", \"params\": [{\"addresses\": [\"tmYXBYJj1K7vhejSec5osXK2QsGa5MTisUQ\"]}] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"getaddresstxids","args":"{\"addresses\": [\"taddr\", ...], (\"start\": n), (\"end\": n)}","summary":"Returns the txids for given transparent addresses within the given (inclusive)","help":"getaddresstxids {\"addresses\": [\"taddr\", ...], (\"start\": n), (\"end\": n)}\n\nReturns the txids for given transparent addresses within the given (inclusive)\n\nblock height range, default is the full blockchain.\n\nStarting v4.5.0, returned txids are in the order they appear in blocks, which \n\nensures that they are topologically sorted (i.e. parent txids will appear before child txids).\n\nWARNING: getaddresstxids is disabled.\nTo enable it, restart zcashd with the following command line options:\n-experimentalfeatures and -insightexplorer or:\n-experimentalfeatures and -lightwalletd\n\nAlternatively add these two lines to the zcash.conf file:\n\nexperimentalfeatures=1\ninsightexplorer=1\n\nor:\n\nexperimentalfeatures=1\nlightwalletd=1\n\nArguments:\n{\n  \"addresses\":\n    [\n      \"taddr\"  (string) The base58check encoded address\n      ,...\n    ]\n  \"start\" (number, optional) The start block height\n  \"end\" (number, optional) The end block height\n}\n(or)\n\"address\"  (string) The base58check encoded address\n\nResult:\n[\n  \"transactionid\"  (string) The transaction id\n  ,...\n]\n\nExamples:\n> zcash-cli getaddresstxids '{\"addresses\": [\"tmYXBYJj1K7vhejSec5osXK2QsGa5MTisUQ\"], \"start\": 1000, \"end\": 2000}'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaddresstxids\", \"params\": [{\"addresses\": [\"tmYXBYJj1K7vhejSec5osXK2QsGa5MTisUQ\"], \"start\": 1000, \"end\": 2000}] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"getaddressutxos","args":"{\"addresses\": [\"taddr\", ...], (\"chainInfo\": true|false)}","summary":"Returns all unspent outputs for an address.","help":"getaddressutxos {\"addresses\": [\"taddr\", ...], (\"chainInfo\": true|false)}\n\nReturns all unspent outputs for an address.\n\nWARNING: getaddressutxos is disabled.\nTo enable it, restart zcashd with the following command line options:\n-experimentalfeatures and -insightexplorer or:\n-experimentalfeatures and -lightwalletd\n\nAlternatively add these two lines to the zcash.conf file:\n\nexperimentalfeatures=1\ninsightexplorer=1\n\nor:\n\nexperimentalfeatures=1\nlightwalletd=1\n\nArguments:\n{\n  \"addresses\":\n    [\n      \"address\"  (string) The base58check encoded address\n      ,...\n    ],\n  \"chainInfo\"  (boolean, optional, default=false) Include chain info with results\n}\n(or)\n\"address\"  (string) The base58check encoded address\n\nResult\n[\n  {\n    \"address\"  (string) The address base58check encoded\n    \"txid\"  (string) The output txid\n    \"height\"  (number) The block height\n    \"outputIndex\"  (number) The output index\n    \"script\"  (string) The script hex encoded\n    \"satoshis\"  (number) The number of zatoshis of the output\n  }, ...\n]\n\n(or, if chainInfo is true):\n\n{\n  \"utxos\":\n    [\n      {\n        \"address\"     (string)  The address base58check encoded\n        \"txid\"        (string)  The output txid\n        \"height\"      (number)  The block height\n        \"outputIndex\" (number)  The output index\n        \"script\"      (string)  The script hex encoded\n        \"satoshis\"    (number)  The number of zatoshis of the output\n      }, ...\n    ],\n  \"hash\"              (string)  The block hash\n  \"height\"            (numeric) The block height\n}\n\nExamples:\n> zcash-cli getaddressutxos '{\"addresses\": [\"tmYXBYJj1K7vhejSec5osXK2QsGa5MTisUQ\"], \"chainInfo\": true}'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaddressutxos\", \"params\": [{\"addresses\": [\"tmYXBYJj1K7vhejSec5osXK2QsGa5MTisUQ\"], \"chainInfo\": true}] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false}]},{"category":"Blockchain","calls":[{"name":"getbestblockhash","args":"","summary":"Returns the hash of the best (tip) block in the longest block chain.","help":"getbestblockhash\n\nReturns the hash of the best (tip) block in the longest block chain.\n\nResult\n\"hex\"      (string) the block hash hex encoded\n\nExamples\n> zcash-cli getbestblockhash \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getbestblockhash\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"getblock","args":"\"hash|height\" ( verbosity )","summary":"If verbosity is 0, returns a string that is serialized, hex-encoded data for the block.If verbosity is 1, returns an Object with information about the block.If verbosity is 2, returns an Object with information about the block and information about each transaction. ","help":"getblock \"hash|height\" ( verbosity )\n\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for the block.\nIf verbosity is 1, returns an Object with information about the block.\nIf verbosity is 2, returns an Object with information about the block and information about each transaction. \n\nArguments:\n1. \"hash|height\"          (string, required) The block hash or height. Height can be negative where -1 is the last known valid block\n2. verbosity              (numeric, optional, default=1) 0 for hex encoded data, 1 for a json object, and 2 for json object with transaction data\n\nResult (for verbosity = 0):\n\"data\"             (string) A string that is serialized, hex-encoded data for the block.\n\nResult (for verbosity = 1):\n{\n  \"hash\" : \"hash\",       (string) the block hash (same as provided hash)\n  \"confirmations\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\n  \"size\" : n,            (numeric) The block size\n  \"height\" : n,          (numeric) The block height or index (same as provided height)\n  \"version\" : n,         (numeric) The block version\n  \"merkleroot\" : \"xxxx\", (string) The merkle root\n  \"finalsaplingroot\" : \"xxxx\", (string) The root of the Sapling commitment tree after applying this block\n  \"finalorchardroot\" : \"xxxx\", (string, optional) The root of the Orchard commitment tree after\n                               applying this block. Omitted for blocks prior to NU5 activation. This\n                               will be the null hash if this block has never been connected to a\n                               main chain.\n                               NB: The serialized representation of this field returned by this method\n                                   was byte-flipped relative to its representation in the `getrawtransaction`\n                                   output in prior releases up to and including v5.2.0. This has now been\n                                   rectified.\n  \"tx\" : [               (array of string) The transaction ids\n     \"transactionid\"     (string) The transaction id\n     ,...\n  ],\n  \"time\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\n  \"nonce\" : n,           (numeric) The nonce\n  \"bits\" : \"1d00ffff\",   (string) The bits\n  \"difficulty\" : x.xxx,  (numeric) The difficulty\n  \"chainSupply\": {          (object) information about the total supply\n      \"monitored\": xx,           (boolean) true if the total supply is being monitored\n      \"chainValue\": xxxxxx,      (numeric, optional) total chain supply after this block, in ZEC\n      \"chainValueZat\": xxxxxx,   (numeric, optional) total chain supply after this block, in zatoshis\n      \"valueDelta\": xxxxxx,      (numeric, optional) change to the chain supply produced by this block, in ZEC\n      \"valueDeltaZat\": xxxxxx,   (numeric, optional) change to the chain supply produced by this block, in zatoshis\n  }\n  \"valuePools\": [            (array) information about each value pool\n      {\n          \"id\": \"xxxx\",            (string) name of the pool\n          \"monitored\": xx,           (boolean) true if the pool is being monitored\n          \"chainValue\": xxxxxx,      (numeric, optional) total amount in the pool, in ZEC\n          \"chainValueZat\": xxxxxx,   (numeric, optional) total amount in the pool, in zatoshis\n          \"valueDelta\": xxxxxx,      (numeric, optional) change to the amount in the pool produced by this block, in ZEC\n          \"valueDeltaZat\": xxxxxx,   (numeric, optional) change to the amount in the pool produced by this block, in zatoshis\n      }, ...\n  ]\n  \"previousblockhash\" : \"hash\",  (string) The hash of the previous block\n  \"nextblockhash\" : \"hash\"       (string) The hash of the next block\n}\n\nResult (for verbosity = 2):\n{\n  ...,                     Same output as verbosity = 1.\n  \"tx\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \"tx\" result.\n         ,...\n  ],\n  ,...                     Same output as verbosity = 1.\n}\n\nExamples:\n> zcash-cli getblock \"00000000febc373a1da2bd9f887b105ad79ddc26ac26c2b28652d64e5207c5b5\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblock\", \"params\": [\"00000000febc373a1da2bd9f887b105ad79ddc26ac26c2b28652d64e5207c5b5\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n> zcash-cli getblock 12800\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblock\", \"params\": [12800] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"getblockchaininfo","args":"","summary":"Note that when the chain tip is at the last block before a network upgrade activation,consensus.chaintip != consensus.nextblock.","help":"getblockchaininfo\nReturns an object containing various state info regarding block chain processing.\n\nNote that when the chain tip is at the last block before a network upgrade activation,\nconsensus.chaintip != consensus.nextblock.\n\nResult:\n{\n  \"chain\": \"xxxx\",        (string) current network name as defined in BIP70 (main, test, regtest)\n  \"blocks\": xxxxxx,         (numeric) the current number of blocks processed in the server\n  \"initial_block_download_complete\": xx, (boolean) true if the initial download of the blockchain is complete\n  \"headers\": xxxxxx,        (numeric) the current number of headers we have validated\n  \"bestblockhash\": \"...\", (string) the hash of the currently best block\n  \"difficulty\": xxxxxx,     (numeric) the current difficulty\n  \"verificationprogress\": xxxx, (numeric) estimate of verification progress [0..1]\n  \"estimatedheight\": xxxx,  (numeric) if syncing, the estimated height of the chain, else the current best height\n  \"chainwork\": \"xxxx\"     (string) total amount of work in active chain, in hexadecimal\n  \"size_on_disk\": xxxxxx,       (numeric) the estimated size of the block and undo files on disk\n  \"commitments\": xxxxxx,    (numeric) the current number of note commitments in the commitment tree\n  \"chainSupply\": {          (object) information about the total supply\n      \"monitored\": xx,           (boolean) true if the total supply is being monitored\n      \"chainValue\": xxxxxx,      (numeric, optional) total chain supply after this block, in ZEC\n      \"chainValueZat\": xxxxxx,   (numeric, optional) total chain supply after this block, in zatoshis\n  }\n  \"valuePools\": [            (array) information about each value pool\n      {\n          \"id\": \"xxxx\",            (string) name of the pool\n          \"monitored\": xx,           (boolean) true if the pool is being monitored\n          \"chainValue\": xxxxxx,      (numeric, optional) total amount in the pool, in ZEC\n          \"chainValueZat\": xxxxxx,   (numeric, optional) total amount in the pool, in zatoshis\n      }, ...\n  ]\n  \"softforks\": [            (array) status of softforks in progress\n     {\n        \"id\": \"xxxx\",        (string) name of softfork\n        \"version\": xx,         (numeric) block version\n        \"enforce\": {           (object) progress toward enforcing the softfork rules for new-version blocks\n           \"status\": xx,       (boolean) true if threshold reached\n           \"found\": xx,        (numeric) number of blocks with the new version found\n           \"required\": xx,     (numeric) number of blocks required to trigger\n           \"window\": xx,       (numeric) maximum size of examined window of recent blocks\n        },\n        \"reject\": { ... }      (object) progress toward rejecting pre-softfork blocks (same fields as \"enforce\")\n     }, ...\n  ],\n  \"upgrades\": {                (object) status of network upgrades\n     \"xxxx\" : {                (string) branch ID of the upgrade\n        \"name\": \"xxxx\",        (string) name of upgrade\n        \"activationheight\": xxxxxx,  (numeric) block height of activation\n        \"status\": \"xxxx\",      (string) status of upgrade\n        \"info\": \"xxxx\",        (string) additional information about upgrade\n     }, ...\n  },\n  \"consensus\": {               (object) branch IDs of the current and upcoming consensus rules\n     \"chaintip\": \"xxxxxxxx\",   (string) branch ID used to validate the current chain tip\n     \"nextblock\": \"xxxxxxxx\"   (string) branch ID that the next block will be validated under\n  }\n}\n\nExamples:\n> zcash-cli getblockchaininfo \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockchaininfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"getblockcount","args":"","summary":"Returns the number of blocks in the best valid block chain.","help":"getblockcount\n\nReturns the number of blocks in the best valid block chain.\n\nResult:\nn    (numeric) The current block count\n\nExamples:\n> zcash-cli getblockcount \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockcount\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"getblockdeltas","args":"\"blockhash\"","summary":"Returns information about the given block and its transactions.","help":"getblockdeltas \"blockhash\"\n\nReturns information about the given block and its transactions.\n\nWARNING: getblockdeltas is disabled.\nTo enable it, restart zcashd with the following command line options:\n-experimentalfeatures and -insightexplorer or:\n-experimentalfeatures and -lightwalletd\n\nAlternatively add these two lines to the zcash.conf file:\n\nexperimentalfeatures=1\ninsightexplorer=1\n\nor:\n\nexperimentalfeatures=1\nlightwalletd=1\n\nArguments:\n1. \"hash\"          (string, required) The block hash\n\nResult:\n{\n  \"hash\": \"hash\",              (string) block ID\n  \"confirmations\": n,          (numeric) number of confirmations\n  \"size\": n,                   (numeric) block size in bytes\n  \"height\": n,                 (numeric) block height\n  \"version\": n,                (numeric) block version (e.g. 4)\n  \"merkleroot\": \"hash\",        (hexstring) block Merkle root\n  \"deltas\": [\n    {\n      \"txid\": \"hash\",          (hexstring) transaction ID\n      \"index\": n,              (numeric) The offset of the tx in the block\n      \"inputs\": [                (array of json objects)\n        {\n          \"address\": \"taddr\",  (string) transparent address\n          \"satoshis\": n,       (numeric) negative of spend amount\n          \"index\": n,          (numeric) vin index\n          \"prevtxid\": \"hash\",  (string) source utxo tx ID\n          \"prevout\": n         (numeric) source utxo index\n        }, ...\n      ],\n      \"outputs\": [             (array of json objects)\n        {\n          \"address\": \"taddr\",  (string) transparent address\n          \"satoshis\": n,       (numeric) amount\n          \"index\": n           (numeric) vout index\n        }, ...\n      ]\n    }, ...\n  ],\n  \"time\" : n,                  (numeric) The block version\n  \"mediantime\": n,             (numeric) The most recent blocks' ave time\n  \"nonce\" : \"nonce\",           (hex string) The nonce\n  \"bits\" : \"1d00ffff\",         (hex string) The bits\n  \"difficulty\": n,             (numeric) the current difficulty\n  \"chainwork\": \"xxxx\"          (hex string) total amount of work in active chain\n  \"previousblockhash\" : \"hash\",(hex string) The hash of the previous block\n  \"nextblockhash\" : \"hash\"     (hex string) The hash of the next block\n}\n\nExamples:\n> zcash-cli getblockdeltas 00227e566682aebd6a7a5b772c96d7a999cadaebeaf1ce96f4191a3aad58b00b\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockdeltas\", \"params\": [\"00227e566682aebd6a7a5b772c96d7a999cadaebeaf1ce96f4191a3aad58b00b\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"getblockhash","args":"index","summary":"Returns hash of block in best-block-chain at index provided.","help":"getblockhash index\n\nReturns hash of block in best-block-chain at index provided.\n\nArguments:\n1. index         (numeric, required) The block index. If negative then -1 is the last known valid block\n\nResult:\n\"hash\"         (string) The block hash\n\nExamples:\n> zcash-cli getblockhash 1000\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockhash\", \"params\": [1000] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"getblockhashes","args":"high low ( {\"noOrphans\": true|false, \"logicalTimes\": true|false} )","summary":"Returns array of hashes of blocks within the timestamp range provided,","help":"getblockhashes high low ( {\"noOrphans\": true|false, \"logicalTimes\": true|false} )\n\nReturns array of hashes of blocks within the timestamp range provided,\n\ngreater or equal to low, less than high.\n\nWARNING: getblockhashes is disabled.\nTo enable it, restart zcashd with the following command line options:\n-experimentalfeatures and -insightexplorer or:\n-experimentalfeatures and -lightwalletd\n\nAlternatively add these two lines to the zcash.conf file:\n\nexperimentalfeatures=1\ninsightexplorer=1\n\nor:\n\nexperimentalfeatures=1\nlightwalletd=1\n\nArguments:\n1. high                            (numeric, required) The newer block timestamp\n2. low                             (numeric, required) The older block timestamp\n3. options                         (string, optional) A json object\n    {\n      \"noOrphans\": true|false      (boolean) will only include blocks on the main chain\n      \"logicalTimes\": true|false   (boolean) will include logical timestamps with hashes\n    }\n\nResult:\n[\n  \"xxxx\"                   (hex string) The block hash\n]\nor\n[\n  {\n    \"blockhash\": \"xxxx\"    (hex string) The block hash\n    \"logicalts\": n         (numeric) The logical timestamp\n  }\n]\n\nExamples:\n> zcash-cli getblockhashes 1558141697 1558141576\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockhashes\", \"params\": [1558141697, 1558141576] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n> zcash-cli getblockhashes 1558141697 1558141576 '{\"noOrphans\":false, \"logicalTimes\":true}'\n\n","deprecated":false},{"name":"getblockheader","args":"\"hash\" ( verbose )","summary":"If verbose is false, returns a string that is serialized, hex-encoded data for blockheader 'hash'.If verbose is true, returns an Object with information about blockheader <hash>.","help":"getblockheader \"hash\" ( verbose )\n\nIf verbose is false, returns a string that is serialized, hex-encoded data for blockheader 'hash'.\nIf verbose is true, returns an Object with information about blockheader <hash>.\n\nArguments:\n1. \"hash\"          (string, required) The block hash\n2. verbose           (boolean, optional, default=true) true for a json object, false for the hex encoded data\n\nResult (for verbose = true):\n{\n  \"hash\" : \"hash\",     (string) the block hash (same as provided)\n  \"confirmations\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\n  \"height\" : n,          (numeric) The block height or index\n  \"version\" : n,         (numeric) The block version\n  \"merkleroot\" : \"xxxx\", (string) The merkle root\n  \"finalsaplingroot\" : \"xxxx\", (string) The root of the Sapling commitment tree after applying this block\n  \"time\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\n  \"nonce\" : n,           (numeric) The nonce\n  \"bits\" : \"1d00ffff\", (string) The bits\n  \"difficulty\" : x.xxx,  (numeric) The difficulty\n  \"previousblockhash\" : \"hash\",  (string) The hash of the previous block\n  \"nextblockhash\" : \"hash\"       (string) The hash of the next block\n}\n\nResult (for verbose=false):\n\"data\"             (string) A string that is serialized, hex-encoded data for block 'hash'.\n\nExamples:\n> zcash-cli getblockheader \"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockheader\", \"params\": [\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"getchaintips","args":"","summary":"Result:[  {    \"height\": xxxx,         (numeric) height of the chain tip    \"hash\": \"xxxx\",         (string) block hash of the tip    \"branchlen\": 0          (numeric) zero for main chain    \"status\": \"active\"      (string) \"active\" for the main chain  },  {    \"height\": xxxx,    \"hash\": \"xxxx\",    \"branchlen\": 1          (numeric) length of branch connecting the tip to the main chain    \"status\": \"xxxx\"        (string) status of the chain (active, valid-fork, valid-headers, headers-only, invalid)  }]Possible values for status:1.  \"invalid\"               This branch contains at least one invalid block2.  \"headers-only\"          Not all blocks for this branch are available, but the headers are valid3.  \"valid-headers\"         All blocks are available for this branch, but they were never fully validated4.  \"valid-fork\"            This branch is not part of the active chain, but is fully validated5.  \"active\"                This is the tip of the active main chain, which is certainly valid","help":"getchaintips\nReturn information about all known tips in the block tree, including the main chain as well as orphaned branches.\n\nResult:\n[\n  {\n    \"height\": xxxx,         (numeric) height of the chain tip\n    \"hash\": \"xxxx\",         (string) block hash of the tip\n    \"branchlen\": 0          (numeric) zero for main chain\n    \"status\": \"active\"      (string) \"active\" for the main chain\n  },\n  {\n    \"height\": xxxx,\n    \"hash\": \"xxxx\",\n    \"branchlen\": 1          (numeric) length of branch connecting the tip to the main chain\n    \"status\": \"xxxx\"        (string) status of the chain (active, valid-fork, valid-headers, headers-only, invalid)\n  }\n]\nPossible values for status:\n1.  \"invalid\"               This branch contains at least one invalid block\n2.  \"headers-only\"          Not all blocks for this branch are available, but the headers are valid\n3.  \"valid-headers\"         All blocks are available for this branch, but they were never fully validated\n4.  \"valid-fork\"            This branch is not part of the active chain, but is fully validated\n5.  \"active\"                This is the tip of the active main chain, which is certainly valid\n\nExamples:\n> zcash-cli getchaintips \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getchaintips\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"getdifficulty","args":"","summary":"Returns the proof-of-work difficulty as a multiple of the minimum difficulty.","help":"getdifficulty\n\nReturns the proof-of-work difficulty as a multiple of the minimum difficulty.\n\nResult:\nn.nnn       (numeric) the proof-of-work difficulty as a multiple of the minimum difficulty.\n\nExamples:\n> zcash-cli getdifficulty \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getdifficulty\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"getmempoolinfo","args":"","summary":"Returns details on the active state of the TX memory pool.","help":"getmempoolinfo\n\nReturns details on the active state of the TX memory pool.\n\nResult:\n{\n  \"size\": xxxxx                (numeric) Current tx count\n  \"bytes\": xxxxx               (numeric) Sum of all tx sizes\n  \"usage\": xxxxx               (numeric) Total memory usage for the mempool\n}\n\nExamples:\n> zcash-cli getmempoolinfo \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmempoolinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"getrawmempool","args":"( verbose )","summary":"Returns all transaction ids in memory pool as a json array of string transaction ids.","help":"getrawmempool ( verbose )\n\nReturns all transaction ids in memory pool as a json array of string transaction ids.\n\nArguments:\n1. verbose           (boolean, optional, default=false) true for a json object, false for array of transaction ids\n\nResult: (for verbose = false):\n[                     (json array of string)\n  \"transactionid\"     (string) The transaction id\n  ,...\n]\n\nResult: (for verbose = true):\n{                           (json object)\n  \"transactionid\" : {       (json object)\n    \"size\" : n,             (numeric) transaction size in bytes\n    \"fee\" : n,              (numeric) transaction fee in ZEC\n    \"modifiedfee\" : n,      (numeric) transaction fee with fee deltas used for mining priority\n    \"time\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT\n    \"height\" : n,           (numeric) block height when transaction entered pool\n    \"startingpriority\" : n, (numeric) priority when transaction entered pool\n    \"currentpriority\" : n,  (numeric) transaction priority now\n    \"descendantcount\" : n,  (numeric) number of in-mempool descendant transactions (including this one)\n    \"descendantsize\" : n,   (numeric) size of in-mempool descendants (including this one)\n    \"descendantfees\" : n,   (numeric) fees of in-mempool descendants (including this one)\n    \"depends\" : [           (array) unconfirmed transactions used as inputs for this transaction\n        \"transactionid\",    (string) parent transaction id\n       ... ]\n  }, ...\n}\n\nExamples\n> zcash-cli getrawmempool true\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getrawmempool\", \"params\": [true] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"getspentinfo","args":"{\"txid\": \"txidhex\", \"index\": n}","summary":"Returns the txid and index where an output is spent.","help":"getspentinfo {\"txid\": \"txidhex\", \"index\": n}\n\nReturns the txid and index where an output is spent.\n\nWARNING: getspentinfo is disabled.\nTo enable it, restart zcashd with the following command line options:\n-experimentalfeatures and -insightexplorer\n\nAlternatively add these two lines to the zcash.conf file:\n\nexperimentalfeatures=1\ninsightexplorer=1\n\nArguments:\n{\n  \"txid\"   (string) The hex string of the txid\n  \"index\"  (number) The vout (output) index\n}\n\nResult:\n{\n  \"txid\"   (string) The transaction id\n  \"index\"  (number) The spending (vin, input) index\n  ,...\n}\n\nExamples:\n> zcash-cli getspentinfo '{\"txid\": \"33990288fb116981260be1de10b8c764f997674545ab14f9240f00346333b780\", \"index\": 4}'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getspentinfo\", \"params\": [{\"txid\": \"33990288fb116981260be1de10b8c764f997674545ab14f9240f00346333b780\", \"index\": 4}] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"gettxout","args":"\"txid\" n ( includemempool )","summary":"Returns details about an unspent transaction output.","help":"gettxout \"txid\" n ( includemempool )\n\nReturns details about an unspent transaction output.\n\nArguments:\n1. \"txid\"       (string, required) The transaction id\n2. n              (numeric, required) vout value\n3. includemempool  (boolean, optional) Whether to include the mempool\n\nResult:\n{\n  \"bestblock\" : \"hash\",    (string) the block hash\n  \"confirmations\" : n,       (numeric) The number of confirmations\n  \"value\" : x.xxx,           (numeric) The transaction value in ZEC\n  \"scriptPubKey\" : {         (json object)\n     \"asm\" : \"code\",       (string) \n     \"hex\" : \"hex\",        (string) \n     \"reqSigs\" : n,          (numeric) Number of required signatures\n     \"type\" : \"pubkeyhash\", (string) The type, eg pubkeyhash\n     \"addresses\" : [          (array of string) array of Zcash addresses\n        \"zcashaddress\"        (string) Zcash address\n        ,...\n     ]\n  },\n  \"version\" : n,              (numeric) The version\n  \"coinbase\" : true|false     (boolean) Coinbase or not\n}\n\nExamples:\n\nGet unspent transactions\n> zcash-cli listunspent \n\nView the details\n> zcash-cli gettxout \"txid\" 1\n\nAs a json rpc call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gettxout\", \"params\": [\"txid\", 1] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"gettxoutproof","args":"[\"txid\",...] ( blockhash )","summary":"Returns a hex-encoded proof that \"txid\" was included in a block.","help":"gettxoutproof [\"txid\",...] ( blockhash )\n\nReturns a hex-encoded proof that \"txid\" was included in a block.\n\nNOTE: By default this function only works sometimes. This is when there is an\nunspent output in the utxo for this transaction. To make it always work,\nyou need to maintain a transaction index, using the -txindex command line option or\nspecify the block in which the transaction is included in manually (by blockhash).\n\nReturn the raw transaction data.\n\nArguments:\n1. \"txids\"       (string) A json array of txids to filter\n    [\n      \"txid\"     (string) A transaction hash\n      ,...\n    ]\n2. \"block hash\"  (string, optional) If specified, looks for txid in the block with this hash\n\nResult:\n\"data\"           (string) A string that is a serialized, hex-encoded data for the proof.\n\n","deprecated":false},{"name":"gettxoutsetinfo","args":"","summary":"Returns statistics about the unspent transaction output set.Note this call may take some time.","help":"gettxoutsetinfo\n\nReturns statistics about the unspent transaction output set.\nNote this call may take some time.\n\nResult:\n{\n  \"height\":n,     (numeric) The current block height (index)\n  \"bestblock\": \"hex\",   (string) the best block hash hex\n  \"transactions\": n,      (numeric) The number of transactions\n  \"txouts\": n,            (numeric) The number of output transactions\n  \"bytes_serialized\": n,  (numeric) The serialized size\n  \"hash_serialized\": \"hash\",   (string) The serialized hash\n  \"total_amount\": x.xxx          (numeric) The total amount\n}\n\nExamples:\n> zcash-cli gettxoutsetinfo \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gettxoutsetinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"verifychain","args":"( checklevel numblocks )","summary":"Verifies blockchain database.","help":"verifychain ( checklevel numblocks )\n\nVerifies blockchain database.\n\nArguments:\n1. checklevel   (numeric, optional, 0-4, default=3) How thorough the block verification is.\n2. numblocks    (numeric, optional, default=288, 0=all) The number of blocks to check.\n\nResult:\ntrue|false       (boolean) Verified or not\n\nExamples:\n> zcash-cli verifychain \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifychain\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"verifytxoutproof","args":"\"proof\"","summary":"Verifies that a proof points to a transaction in a block, returning the transaction it commits toand throwing an RPC error if the block is not in our best chain","help":"verifytxoutproof \"proof\"\n\nVerifies that a proof points to a transaction in a block, returning the transaction it commits to\nand throwing an RPC error if the block is not in our best chain\n\nArguments:\n1. \"proof\"    (string, required) The hex-encoded proof generated by gettxoutproof\n\nResult:\n[\"txid\"]      (array, strings) The txid(s) which the proof commits to, or empty array if the proof is invalid\n\n","deprecated":false},{"name":"z_gettreestate","args":"\"hash|height\"","summary":"Arguments:1. \"hash|height\"          (string, required) The block hash or height. Height can be negative where -1 is the last known valid block","help":"z_gettreestate \"hash|height\"\nReturn information about the given block's tree state.\n\nArguments:\n1. \"hash|height\"          (string, required) The block hash or height. Height can be negative where -1 is the last known valid block\n\nResult:\n{\n  \"hash\": \"hash\",         (string) hex block hash\n  \"height\": n,              (numeric) block height\n  \"time\": n,                (numeric) block time: UTC seconds since the Unix 1970-01-01 epoch\n  \"sprout\": {\n    \"skipHash\": \"hash\",   (string) hash of most recent block with more information\n    \"commitments\": {\n      \"finalRoot\": \"hex\", (string)\n      \"finalState\": \"hex\" (string)\n    }\n  },\n  \"sapling\": {\n    \"skipHash\": \"hash\",   (string) hash of most recent block with more information\n    \"commitments\": {\n      \"finalRoot\": \"hex\", (string)\n                          NB: The serialized representation of this field returned by this method\n                              was byte-flipped relative to its representation in the `getrawtransaction`\n                              output in prior releases up to and including v5.2.0. This has now been\n                              rectified.\n      \"finalState\": \"hex\" (string)\n    }\n  },\n  \"orchard\": {\n    \"skipHash\": \"hash\",   (string) hash of most recent block with more information\n    \"commitments\": {\n      \"finalRoot\": \"hex\", (string)\n      \"finalState\": \"hex\" (string)\n    }\n  }\n}\n\nExamples:\n> zcash-cli z_gettreestate \"00000000febc373a1da2bd9f887b105ad79ddc26ac26c2b28652d64e5207c5b5\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_gettreestate\", \"params\": [\"00000000febc373a1da2bd9f887b105ad79ddc26ac26c2b28652d64e5207c5b5\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n> zcash-cli z_gettreestate 12800\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_gettreestate\", \"params\": [12800] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false}]},{"category":"Control","calls":[{"name":"getexperimentalfeatures","args":"","summary":"Returns enabled experimental features.","help":"getexperimentalfeatures\n\nReturns enabled experimental features.\n\nResult:\n  [\n     \"experimentalfeature\"     (string) The enabled experimental feature\n     ,...\n  ],\n\nExamples:\n> zcash-cli getexperimentalfeatures \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getexperimentalfeatures\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"getinfo","args":"","summary":"Result:{  \"version\": xxxxx,           (numeric) the server version  \"build\": xxxxx,             (string)  the build number  \"subversion\": xxxxx,        (string)  the server sub-version identifier  \"protocolversion\": xxxxx,   (numeric) the protocol version  \"walletversion\": xxxxx,     (numeric, optional) the wallet version, if wallet functionality is enabled  \"balance\": xxxxxxx,         (numeric, optional) the total Zcash balance of the wallet, if wallet functionality is enabled  \"blocks\": xxxxxx,           (numeric) the current number of blocks processed in the server  \"timeoffset\": xxxxx,        (numeric) the time offset (deprecated; always 0)  \"connections\": xxxxx,       (numeric) the number of connections  \"proxy\": \"host:port\",     (string, optional) the proxy used by the server  \"difficulty\": xxxxxx,       (numeric) the current difficulty  \"testnet\": true|false,      (boolean) if the server is using testnet or not  \"keypoololdest\": xxxxxx,    (numeric, optional) the timestamp (seconds since GMT epoch) of the oldest pre-generated key in the key pool, if wallet functionality is enabled  \"keypoolsize\": xxxx,        (numeric, optional) how many new keys are pre-generated  \"unlocked_until\": ttt,      (numeric, optional) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked, if wallet functionality is available and the wallet is encrypted  \"paytxfee\": x.xxxx,         (numeric) the transaction fee set in ZEC/kB  \"relayfee\": x.xxxx,         (numeric) minimum relay fee for non-free transactions in ZEC/kB  \"errors\": \"...\"           (string) message describing the latest or highest-priority error  \"errorstimestamp\": \"...\"  (string) timestamp associated with the latest or highest-priority error}","help":"getinfo\nReturns an object containing various state info.\n\nResult:\n{\n  \"version\": xxxxx,           (numeric) the server version\n  \"build\": xxxxx,             (string)  the build number\n  \"subversion\": xxxxx,        (string)  the server sub-version identifier\n  \"protocolversion\": xxxxx,   (numeric) the protocol version\n  \"walletversion\": xxxxx,     (numeric, optional) the wallet version, if wallet functionality is enabled\n  \"balance\": xxxxxxx,         (numeric, optional) the total Zcash balance of the wallet, if wallet functionality is enabled\n  \"blocks\": xxxxxx,           (numeric) the current number of blocks processed in the server\n  \"timeoffset\": xxxxx,        (numeric) the time offset (deprecated; always 0)\n  \"connections\": xxxxx,       (numeric) the number of connections\n  \"proxy\": \"host:port\",     (string, optional) the proxy used by the server\n  \"difficulty\": xxxxxx,       (numeric) the current difficulty\n  \"testnet\": true|false,      (boolean) if the server is using testnet or not\n  \"keypoololdest\": xxxxxx,    (numeric, optional) the timestamp (seconds since GMT epoch) of the oldest pre-generated key in the key pool, if wallet functionality is enabled\n  \"keypoolsize\": xxxx,        (numeric, optional) how many new keys are pre-generated\n  \"unlocked_until\": ttt,      (numeric, optional) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked, if wallet functionality is available and the wallet is encrypted\n  \"paytxfee\": x.xxxx,         (numeric) the transaction fee set in ZEC/kB\n  \"relayfee\": x.xxxx,         (numeric) minimum relay fee for non-free transactions in ZEC/kB\n  \"errors\": \"...\"           (string) message describing the latest or highest-priority error\n  \"errorstimestamp\": \"...\"  (string) timestamp associated with the latest or highest-priority error\n}\n\nExamples:\n> zcash-cli getinfo \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"getmemoryinfo","args":"","summary":"Result:{  \"locked\": {               (json object) Information about locked memory manager    \"used\": xxxxx,          (numeric) Number of bytes used    \"free\": xxxxx,          (numeric) Number of bytes available in current arenas    \"total\": xxxxxxx,       (numeric) Total number of bytes managed    \"locked\": xxxxxx,       (numeric) Amount of bytes that succeeded locking. If this number is smaller than total, locking pages failed at some point and key data could be swapped to disk.    \"chunks_used\": xxxxx,   (numeric) Number allocated chunks    \"chunks_free\": xxxxx,   (numeric) Number unused chunks  }}","help":"getmemoryinfo\nReturns an object containing information about memory usage.\n\nResult:\n{\n  \"locked\": {               (json object) Information about locked memory manager\n    \"used\": xxxxx,          (numeric) Number of bytes used\n    \"free\": xxxxx,          (numeric) Number of bytes available in current arenas\n    \"total\": xxxxxxx,       (numeric) Total number of bytes managed\n    \"locked\": xxxxxx,       (numeric) Amount of bytes that succeeded locking. If this number is smaller than total, locking pages failed at some point and key data could be swapped to disk.\n    \"chunks_used\": xxxxx,   (numeric) Number allocated chunks\n    \"chunks_free\": xxxxx,   (numeric) Number unused chunks\n  }\n}\n\nExamples:\n> zcash-cli getmemoryinfo \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmemoryinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"help","args":"( \"command\" )","summary":"List all commands, or get help for a specified command.","help":"help ( \"command\" )\n\nList all commands, or get help for a specified command.\n\nArguments:\n1. \"command\"     (string, optional) The command to get help on\n\nResult:\n\"text\"     (string) The help text\n\n","deprecated":false},{"name":"setlogfilter","args":"\"directives\"","summary":"Sets the filter to be used for selecting events to log.","help":"setlogfilter \"directives\"\n\nSets the filter to be used for selecting events to log.\n\nA filter is a comma-separated list of directives.\nThe syntax for each directive is:\n\n    target[span{field=value}]=level\n\nThe default filter, derived from the -debug=target flags, is:\n\n    error,main=info\n\nPassing a valid filter here will replace the existing filter.\nPassing an empty string will reset the filter to the default.\n\nNote that enabling trace-level events should always be considered\nunsafe, as they can result in sensitive information like decrypted\nnotes and private keys being printed to the log output.\n\nArguments:\n1. newFilterDirectives (string, required) The new log filter.\n\nExamples:\n> zcash-cli setlogfilter \"main=info,rpc=info\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setlogfilter\", \"params\": [\"main=info,rpc=info\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"stop","args":"","summary":"Stop Zcash server.","help":"stop\n\nStop Zcash server.\n","deprecated":false}]},{"category":"Disclosure","calls":[{"name":"z_getpaymentdisclosure","args":"\"txid\" \"js_index\" \"output_index\" (\"message\") ","summary":"Generate a payment disclosure for a given joinsplit output.","help":"z_getpaymentdisclosure \"txid\" \"js_index\" \"output_index\" (\"message\") \n\nGenerate a payment disclosure for a given joinsplit output.\n\nEXPERIMENTAL FEATURE\n\nWARNING: z_getpaymentdisclosure is disabled.\nTo enable it, restart zcashd with the following command line options:\n-experimentalfeatures and -paymentdisclosure\n\nAlternatively add these two lines to the zcash.conf file:\n\nexperimentalfeatures=1\npaymentdisclosure=1\n\nArguments:\n1. \"txid\"            (string, required) \n2. \"js_index\"        (string, required) \n3. \"output_index\"    (string, required) \n4. \"message\"         (string, optional) \n\nResult:\n\"paymentdisclosure\"  (string) Hex data string, with \"zpd:\" prefix.\n\nExamples:\n> zcash-cli z_getpaymentdisclosure 96f12882450429324d5f3b48630e3168220e49ab7b0f066e5c2935a6b88bb0f2 0 0 \"refund\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_getpaymentdisclosure\", \"params\": [\"96f12882450429324d5f3b48630e3168220e49ab7b0f066e5c2935a6b88bb0f2\", 0, 0, \"refund\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"z_validatepaymentdisclosure","args":"\"paymentdisclosure\"","summary":"Validates a payment disclosure.","help":"z_validatepaymentdisclosure \"paymentdisclosure\"\n\nValidates a payment disclosure.\n\nEXPERIMENTAL FEATURE\n\nWARNING: z_validatepaymentdisclosure is disabled.\nTo enable it, restart zcashd with the following command line options:\n-experimentalfeatures and -paymentdisclosure\n\nAlternatively add these two lines to the zcash.conf file:\n\nexperimentalfeatures=1\npaymentdisclosure=1\n\nArguments:\n1. \"paymentdisclosure\"     (string, required) Hex data string, with \"zpd:\" prefix.\n\nExamples:\n> zcash-cli z_validatepaymentdisclosure \"zpd:706462ff004c561a0447ba2ec51184e6c204...\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_validatepaymentdisclosure\", \"params\": [\"zpd:706462ff004c561a0447ba2ec51184e6c204...\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false}]},{"category":"Generating","calls":[{"name":"generate","args":"numblocks","summary":"Mine blocks immediately (before the RPC call returns)","help":"generate numblocks\n\nMine blocks immediately (before the RPC call returns)\n\nNote: this function can only be used on the regtest network\n\nArguments:\n1. numblocks    (numeric, required) How many blocks are generated immediately.\n\nResult\n[ blockhashes ]     (array) hashes of blocks generated\n\nExamples:\n\nGenerate 11 blocks\n> zcash-cli generate 11\n\n","deprecated":false},{"name":"getgenerate","args":"","summary":"Return if the server is set to generate coins or not. The default is false.It is set with the command line argument -gen (or zcash.conf setting gen)It can also be set with the setgenerate call.","help":"getgenerate\n\nReturn if the server is set to generate coins or not. The default is false.\nIt is set with the command line argument -gen (or zcash.conf setting gen)\nIt can also be set with the setgenerate call.\n\nResult\ntrue|false      (boolean) If the server is set to generate coins or not\n\nExamples:\n> zcash-cli getgenerate \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getgenerate\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"setgenerate","args":"generate ( genproclimit )","summary":"Set 'generate' true or false to turn generation on or off.Generation is limited to 'genproclimit' processors, -1 is unlimited.See the getgenerate call for the current setting.","help":"setgenerate generate ( genproclimit )\n\nSet 'generate' true or false to turn generation on or off.\nGeneration is limited to 'genproclimit' processors, -1 is unlimited.\nSee the getgenerate call for the current setting.\n\nArguments:\n1. generate         (boolean, required) Set to true to turn on generation, off to turn off.\n2. genproclimit     (numeric, optional) Set the processor limit for when generation is on. Can be -1 for unlimited.\n\nExamples:\n\nSet the generation on with a limit of one processor\n> zcash-cli setgenerate true 1\n\nCheck the setting\n> zcash-cli getgenerate \n\nTurn off generation\n> zcash-cli setgenerate false\n\nUsing json rpc\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setgenerate\", \"params\": [true, 1] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false}]},{"category":"Mining","calls":[{"name":"getblocksubsidy","args":"height","summary":"Returns block subsidy reward, taking into account the mining slow start and the founders reward, of block at index provided.","help":"getblocksubsidy height\n\nReturns block subsidy reward, taking into account the mining slow start and the founders reward, of block at index provided.\n\nArguments:\n1. height         (numeric, optional) The block height.  If not provided, defaults to the current height of the chain.\n\nResult:\n{\n  \"miner\" : x.xxx,              (numeric) The mining reward amount in ZEC.\n  \"founders\" : x.xxx,           (numeric) The founders' reward amount in ZEC.\n  \"fundingstreams\" : [          (array) An array of funding stream descriptions (present only when Canopy has activated).\n    {\n      \"recipient\" : \"...\",        (string) A description of the funding stream recipient.\n      \"specification\" : \"url\",    (string) A URL for the specification of this funding stream.\n      \"value\" : x.xxx             (numeric) The funding stream amount in ZEC.\n      \"valueZat\" : xxxx           (numeric) The funding stream amount in zatoshis.\n      \"address\" :                 (string) The transparent or Sapling address of the funding stream recipient.\n    }, ...\n  ]\n}\n\nExamples:\n> zcash-cli getblocksubsidy 1000\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblocksubsidy\", \"params\": [1000] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"getblocktemplate","args":"( \"jsonrequestobject\" )","summary":"If the request parameters include a 'mode' key, that is used to explicitly select between the default 'template' request or a 'proposal'.It returns data needed to construct a block to work on.See https://en.bitcoin.it/wiki/BIP_0022 for full specification.","help":"getblocktemplate ( \"jsonrequestobject\" )\n\nIf the request parameters include a 'mode' key, that is used to explicitly select between the default 'template' request or a 'proposal'.\nIt returns data needed to construct a block to work on.\nSee https://en.bitcoin.it/wiki/BIP_0022 for full specification.\n\nTo obtain information about founder's reward or funding stream\namounts, use 'getblocksubsidy HEIGHT' passing in the height returned\nby this API.\n\nThe roots returned in 'defaultroots' are only valid if the block template is\nused unmodified. If any part of the block template marked as 'mutable' in the\noutput is mutated, these roots may need to be recomputed. For more information\non the derivation process, see ZIP 244.\n\nArguments:\n1. \"jsonrequestobject\"       (string, optional) A json object in the following spec\n     {\n       \"mode\":\"template,\"    (string, optional) This must be set to \"template\" or omitted\n       \"capabilities\":[      (array, optional) A list of strings\n           \"support\"         (string) client side supported feature, 'longpoll', 'coinbasetxn', 'coinbasevalue', 'proposal', 'serverlist', 'workid'\n           ,...\n         ],\n       \"longpollid\":\"id\"     (string, optional) id to wait for\n     }\n\n\nResult:\n{\n  \"version\" : n,                     (numeric) The block version\n  \"previousblockhash\" : \"xxxx\",      (string) The hash of current highest block\n  \"blockcommitmentshash\" : \"xxxx\",   (string) (DEPRECATED) The hash of the block commitments field in the block header\n  \"lightclientroothash\" : \"xxxx\",    (string) (DEPRECATED) The hash of the light client root field in the block header\n  \"finalsaplingroothash\" : \"xxxx\",   (string) (DEPRECATED) The hash of the light client root field in the block header\n  \"defaultroots\" : {                 (json object) root hashes that need to be recomputed if the transaction set is modified\n     \"merkleroot\" : \"xxxx\"           (string) The hash of the transactions in the block header\n     \"chainhistoryroot\" : \"xxxx\"     (string) The hash of the chain history\n     \"authdataroot\" : \"xxxx\"         (string) (From NU5) The hash of the authorizing data merkel tree\n     \"blockcommitmentshash\" : \"xxxx\" (string) (From NU5) The hash of the block commitments field in the block header\n  }\n  \"transactions\" : [                 (array) contents of non-coinbase transactions that should be included in the next block\n      {\n         \"data\" : \"xxxx\",            (string) transaction data encoded in hexadecimal (byte-for-byte)\n         \"hash\" : \"xxxx\",            (string) hash/id encoded in little-endian hexadecimal\n         \"depends\" : [               (array) array of numbers \n             n                       (numeric) transactions before this one (by 1-based index in 'transactions' list) that must be present in the final block if this one is\n             ,...\n         ],\n         \"fee\": n,                   (numeric) difference in value between transaction inputs and outputs (in Satoshis); for coinbase transactions, this is a negative Number of the total collected block fees (ie, not including the block subsidy); if key is not present, fee is unknown and clients MUST NOT assume there isn't one\n         \"sigops\" : n,               (numeric) total number of SigOps, as counted for purposes of block limits; if key is not present, sigop count is unknown and clients MUST NOT assume there aren't any\n         \"required\" : true|false     (boolean) if provided and true, this transaction must be in the final block\n      }\n      ,...\n  ],\n  \"coinbasetxn\" : { ... },           (json object) information for coinbase transaction\n  \"target\" : \"xxxx\",                 (string) The hash target\n  \"longpollid\" : \"str\",              (string) an id to include with a request to longpoll on an update to this template\n  \"mintime\" : xxx,                   (numeric) The minimum timestamp appropriate for next block time in seconds since epoch (Jan 1 1970 GMT)\n  \"mutable\" : [                      (array of string) list of ways the block template may be changed \n     \"value\"                         (string) A way the block template may be changed, e.g. 'time', 'transactions', 'prevblock'\n     ,...\n  ],\n  \"noncerange\" : \"00000000ffffffff\", (string) A range of valid nonces\n  \"sigoplimit\" : n,                  (numeric) limit of sigops in blocks\n  \"sizelimit\" : n,                   (numeric) limit of block size\n  \"curtime\" : ttt,                   (numeric) current timestamp in seconds since epoch (Jan 1 1970 GMT)\n  \"bits\" : \"xxx\",                    (string) compressed target of next block\n  \"height\" : n                       (numeric) The height of the next block\n}\n\nExamples:\n> zcash-cli getblocktemplate \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblocktemplate\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"getlocalsolps","args":"","summary":"Returns the average local solutions per second since this node was started.This is the same information shown on the metrics screen (if enabled).","help":"getlocalsolps\n\nReturns the average local solutions per second since this node was started.\nThis is the same information shown on the metrics screen (if enabled).\n\nResult:\nxxx.xxxxx     (numeric) Solutions per second average\n\nExamples:\n> zcash-cli getlocalsolps \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getlocalsolps\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"getmininginfo","args":"","summary":"Returns a json object containing mining-related information.Result:{  \"blocks\": nnn,             (numeric) The current block  \"currentblocksize\": nnn,   (numeric, optional) The block size of the last assembled block (only present if a block was ever assembled)  \"currentblocktx\": nnn,     (numeric, optional) The number of block non-coinbase transactions of the last assembled block (only present if a block was ever assembled)  \"difficulty\": xxx.xxxxx    (numeric) The current difficulty  \"errors\": \"...\"          (string) Current errors  \"generate\": true|false     (boolean) If the generation is on or off (see getgenerate or setgenerate calls)  \"genproclimit\": n          (numeric) The processor limit for generation. -1 if no generation. (see getgenerate or setgenerate calls)  \"localsolps\": xxx.xxxxx    (numeric) The average local solution rate in Sol/s since this node was started  \"networksolps\": x          (numeric) The estimated network solution rate in Sol/s  \"pooledtx\": n              (numeric) The size of the mem pool  \"testnet\": true|false      (boolean) If using testnet or not  \"chain\": \"xxxx\",         (string) current network name as defined in BIP70 (main, test, regtest)}","help":"getmininginfo\n\nReturns a json object containing mining-related information.\nResult:\n{\n  \"blocks\": nnn,             (numeric) The current block\n  \"currentblocksize\": nnn,   (numeric, optional) The block size of the last assembled block (only present if a block was ever assembled)\n  \"currentblocktx\": nnn,     (numeric, optional) The number of block non-coinbase transactions of the last assembled block (only present if a block was ever assembled)\n  \"difficulty\": xxx.xxxxx    (numeric) The current difficulty\n  \"errors\": \"...\"          (string) Current errors\n  \"generate\": true|false     (boolean) If the generation is on or off (see getgenerate or setgenerate calls)\n  \"genproclimit\": n          (numeric) The processor limit for generation. -1 if no generation. (see getgenerate or setgenerate calls)\n  \"localsolps\": xxx.xxxxx    (numeric) The average local solution rate in Sol/s since this node was started\n  \"networksolps\": x          (numeric) The estimated network solution rate in Sol/s\n  \"pooledtx\": n              (numeric) The size of the mem pool\n  \"testnet\": true|false      (boolean) If using testnet or not\n  \"chain\": \"xxxx\",         (string) current network name as defined in BIP70 (main, test, regtest)\n}\n\nExamples:\n> zcash-cli getmininginfo \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmininginfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"getnetworkhashps","args":"( blocks height )","summary":"DEPRECATED - left for backwards-compatibility. Use getnetworksolps instead.","help":"getnetworkhashps ( blocks height )\n\nDEPRECATED - left for backwards-compatibility. Use getnetworksolps instead.\n\nReturns the estimated network solutions per second based on the last n blocks.\nPass in [blocks] to override # of blocks, -1 specifies over difficulty averaging window.\nPass in [height] to estimate the network speed at the time when a certain block was found.\n\nArguments:\n1. blocks     (numeric, optional, default=120) The number of blocks, or -1 for blocks over difficulty averaging window.\n2. height     (numeric, optional, default=-1) To estimate at the time of the given height.\n\nResult:\nx             (numeric) Solutions per second estimated\n\nExamples:\n> zcash-cli getnetworkhashps \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnetworkhashps\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":true},{"name":"getnetworksolps","args":"( blocks height )","summary":"Returns the estimated network solutions per second based on the last n blocks.Pass in [blocks] to override # of blocks, -1 specifies over difficulty averaging window.Pass in [height] to estimate the network speed at the time when a certain block was found.","help":"getnetworksolps ( blocks height )\n\nReturns the estimated network solutions per second based on the last n blocks.\nPass in [blocks] to override # of blocks, -1 specifies over difficulty averaging window.\nPass in [height] to estimate the network speed at the time when a certain block was found.\n\nArguments:\n1. blocks     (numeric, optional, default=120) The number of blocks, or -1 for blocks over difficulty averaging window.\n2. height     (numeric, optional, default=-1) To estimate at the time of the given height.\n\nResult:\nx             (numeric) Solutions per second estimated\n\nExamples:\n> zcash-cli getnetworksolps \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnetworksolps\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"prioritisetransaction","args":"<txid> <priority delta> <fee delta>","summary":"Arguments:1. \"txid\"       (string, required) The transaction id.2. priority delta (numeric, required) The priority to add or subtract.                  The transaction selection algorithm considers the tx as it would have a higher priority.                  (priority of a transaction is calculated: coinage * value_in_satoshis / txsize) 3. fee delta      (numeric, required) The fee value (in satoshis) to add (or subtract, if negative).                  The fee is not actually paid, only the algorithm for selecting transactions into a block                  considers the transaction as it would have paid a higher (or lower) fee.","help":"prioritisetransaction <txid> <priority delta> <fee delta>\nAccepts the transaction into mined blocks at a higher (or lower) priority\n\nArguments:\n1. \"txid\"       (string, required) The transaction id.\n2. priority delta (numeric, required) The priority to add or subtract.\n                  The transaction selection algorithm considers the tx as it would have a higher priority.\n                  (priority of a transaction is calculated: coinage * value_in_satoshis / txsize) \n3. fee delta      (numeric, required) The fee value (in satoshis) to add (or subtract, if negative).\n                  The fee is not actually paid, only the algorithm for selecting transactions into a block\n                  considers the transaction as it would have paid a higher (or lower) fee.\n\nResult\ntrue              (boolean) Returns true\n\nExamples:\n> zcash-cli prioritisetransaction \"txid\" 0.0 10000\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"prioritisetransaction\", \"params\": [\"txid\", 0.0, 10000] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"submitblock","args":"\"hexdata\" ( \"jsonparametersobject\" )","summary":"Attempts to submit new block to network.The 'jsonparametersobject' parameter is currently ignored.See https://en.bitcoin.it/wiki/BIP_0022 for full specification.","help":"submitblock \"hexdata\" ( \"jsonparametersobject\" )\n\nAttempts to submit new block to network.\nThe 'jsonparametersobject' parameter is currently ignored.\nSee https://en.bitcoin.it/wiki/BIP_0022 for full specification.\n\nArguments\n1. \"hexdata\"    (string, required) the hex-encoded block data to submit\n2. \"jsonparametersobject\"     (string, optional) object of optional parameters\n    {\n      \"workid\" : \"id\"    (string, optional) if the server provided a workid, it MUST be included with submissions\n    }\n\nResult:\n\"duplicate\" - node already has valid copy of block\n\"duplicate-invalid\" - node already has block, but it is invalid\n\"duplicate-inconclusive\" - node already has block but has not validated it\n\"inconclusive\" - node has not validated the block, it may not be on the node's current best chain\n\"rejected\" - block was rejected as invalid\nFor more information on submitblock parameters and results, see: https://github.com/bitcoin/bips/blob/master/bip-0022.mediawiki#block-submission\n\nExamples:\n> zcash-cli submitblock \"mydata\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitblock\", \"params\": [\"mydata\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false}]},{"category":"Network","calls":[{"name":"addnode","args":"\"node\" \"add|remove|onetry\"","summary":"Attempts to add or remove a node from the addnode list.Or try a connection to a node once.","help":"addnode \"node\" \"add|remove|onetry\"\n\nAttempts to add or remove a node from the addnode list.\nOr try a connection to a node once.\n\nArguments:\n1. \"node\"     (string, required) The node (see getpeerinfo for nodes)\n2. \"command\"  (string, required) 'add' to add a node to the list, 'remove' to remove a node from the list, 'onetry' to try a connection to the node once\n\nExamples:\n> zcash-cli addnode \"192.168.0.6:8233\" \"onetry\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"addnode\", \"params\": [\"192.168.0.6:8233\", \"onetry\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"clearbanned","args":"","summary":"Clear all banned IPs.","help":"clearbanned\n\nClear all banned IPs.\n\nExamples:\n> zcash-cli clearbanned \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"clearbanned\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"disconnectnode","args":"\"node\" ","summary":"Immediately disconnects from the specified node.","help":"disconnectnode \"node\" \n\nImmediately disconnects from the specified node.\n\nArguments:\n1. \"node\"     (string, required) The node (see getpeerinfo for nodes)\n\nExamples:\n> zcash-cli disconnectnode \"192.168.0.6:8233\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"disconnectnode\", \"params\": [\"192.168.0.6:8233\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"getaddednodeinfo","args":"dns ( \"node\" )","summary":"Returns information about the given added node, or all added nodes(note that onetry addnodes are not listed here)If dns is false, only a list of added nodes will be provided,otherwise connected information will also be available.","help":"getaddednodeinfo dns ( \"node\" )\n\nReturns information about the given added node, or all added nodes\n(note that onetry addnodes are not listed here)\nIf dns is false, only a list of added nodes will be provided,\notherwise connected information will also be available.\n\nArguments:\n1. dns        (boolean, required) If false, only a list of added nodes will be provided, otherwise connected information will also be available.\n2. \"node\"   (string, optional) If provided, return information about this specific node, otherwise all nodes are returned.\n\nResult:\n[\n  {\n    \"addednode\" : \"192.168.0.201\",   (string) The node IP address\n    \"connected\" : true|false,          (boolean) If connected\n    \"addresses\" : [\n       {\n         \"address\" : \"192.168.0.201:8233\",  (string) The Zcash server host and port\n         \"connected\" : \"outbound\"           (string) connection, inbound or outbound\n       }\n       ,...\n     ]\n  }\n  ,...\n]\n\nExamples:\n> zcash-cli getaddednodeinfo true\n> zcash-cli getaddednodeinfo true \"192.168.0.201\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaddednodeinfo\", \"params\": [true, \"192.168.0.201\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"getconnectioncount","args":"","summary":"Returns the number of connections to other nodes.","help":"getconnectioncount\n\nReturns the number of connections to other nodes.\n\nbResult:\nn          (numeric) The connection count\n\nExamples:\n> zcash-cli getconnectioncount \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getconnectioncount\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"getdeprecationinfo","args":"","summary":"Result:{  \"version\": xxxxx,                      (numeric) the server version  \"subversion\": \"/MagicBean:x.y.z[-v]/\",     (string) the server subversion string  \"deprecationheight\": xxxxx,            (numeric) the block height at which this version will deprecate and shut down}","help":"getdeprecationinfo\nReturns an object containing current version and deprecation block height. Applicable only on mainnet.\n\nResult:\n{\n  \"version\": xxxxx,                      (numeric) the server version\n  \"subversion\": \"/MagicBean:x.y.z[-v]/\",     (string) the server subversion string\n  \"deprecationheight\": xxxxx,            (numeric) the block height at which this version will deprecate and shut down\n}\n\nExamples:\n> zcash-cli getdeprecationinfo \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getdeprecationinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"getnettotals","args":"","summary":"Returns information about network traffic, including bytes in, bytes out,and current time.","help":"getnettotals\n\nReturns information about network traffic, including bytes in, bytes out,\nand current time.\n\nResult:\n{\n  \"totalbytesrecv\": n,   (numeric) Total bytes received\n  \"totalbytessent\": n,   (numeric) Total bytes sent\n  \"timemillis\": t,       (numeric) Total cpu time\n  \"uploadtarget\":\n  {\n    \"timeframe\": n,                         (numeric) Length of the measuring timeframe in seconds\n    \"target\": n,                            (numeric) Target in bytes\n    \"target_reached\": true|false,           (boolean) True if target is reached\n    \"serve_historical_blocks\": true|false,  (boolean) True if serving historical blocks\n    \"bytes_left_in_cycle\": t,               (numeric) Bytes left in current time cycle\n    \"time_left_in_cycle\": t                 (numeric) Seconds left in current time cycle\n  }\n}\n\nExamples:\n> zcash-cli getnettotals \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnettotals\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"getnetworkinfo","args":"","summary":"Result:{  \"version\": xxxxx,                      (numeric) the server version  \"subversion\": \"/MagicBean:x.y.z[-v]/\",     (string) the server subversion string  \"protocolversion\": xxxxx,              (numeric) the protocol version  \"localservices\": \"xxxxxxxxxxxxxxxx\", (string) the services we offer to the network  \"timeoffset\": xxxxx,                   (numeric) the time offset (deprecated; always 0)  \"connections\": xxxxx,                  (numeric) the number of connections  \"networks\": [                          (array) information per network  {    \"name\": \"xxx\",                     (string) network (ipv4, ipv6 or onion)    \"limited\": true|false,               (boolean) is the network limited using -onlynet?    \"reachable\": true|false,             (boolean) is the network reachable?    \"proxy\": \"host:port\"               (string) the proxy that is used for this network, or empty if none  }  ,...  ],  \"relayfee\": x.xxxxxxxx,                (numeric) minimum relay fee for non-free transactions in ZEC/kB  \"localaddresses\": [                    (array) list of local addresses  {    \"address\": \"xxxx\",                 (string) network address    \"port\": xxx,                         (numeric) network port    \"score\": xxx                         (numeric) relative score  }  ,...  ]  \"warnings\": \"...\"                    (string) any network warnings (such as alert messages) }","help":"getnetworkinfo\nReturns an object containing various state info regarding P2P networking.\n\nResult:\n{\n  \"version\": xxxxx,                      (numeric) the server version\n  \"subversion\": \"/MagicBean:x.y.z[-v]/\",     (string) the server subversion string\n  \"protocolversion\": xxxxx,              (numeric) the protocol version\n  \"localservices\": \"xxxxxxxxxxxxxxxx\", (string) the services we offer to the network\n  \"timeoffset\": xxxxx,                   (numeric) the time offset (deprecated; always 0)\n  \"connections\": xxxxx,                  (numeric) the number of connections\n  \"networks\": [                          (array) information per network\n  {\n    \"name\": \"xxx\",                     (string) network (ipv4, ipv6 or onion)\n    \"limited\": true|false,               (boolean) is the network limited using -onlynet?\n    \"reachable\": true|false,             (boolean) is the network reachable?\n    \"proxy\": \"host:port\"               (string) the proxy that is used for this network, or empty if none\n  }\n  ,...\n  ],\n  \"relayfee\": x.xxxxxxxx,                (numeric) minimum relay fee for non-free transactions in ZEC/kB\n  \"localaddresses\": [                    (array) list of local addresses\n  {\n    \"address\": \"xxxx\",                 (string) network address\n    \"port\": xxx,                         (numeric) network port\n    \"score\": xxx                         (numeric) relative score\n  }\n  ,...\n  ]\n  \"warnings\": \"...\"                    (string) any network warnings (such as alert messages) \n}\n\nExamples:\n> zcash-cli getnetworkinfo \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnetworkinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"getpeerinfo","args":"","summary":"Returns data about each connected network node as a json array of objects.","help":"getpeerinfo\n\nReturns data about each connected network node as a json array of objects.\n\nbResult:\n[\n  {\n    \"id\": n,                   (numeric) Peer index\n    \"addr\":\"host:port\",      (string) The IP address and port of the peer\n    \"addrlocal\":\"ip:port\",   (string) local address\n    \"services\":\"xxxxxxxxxxxxxxxx\",   (string) The services offered\n    \"relaytxes\":true|false,    (boolean) Whether peer has asked us to relay transactions to it\n    \"lastsend\": ttt,           (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last send\n    \"lastrecv\": ttt,           (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last receive\n    \"bytessent\": n,            (numeric) The total bytes sent\n    \"bytesrecv\": n,            (numeric) The total bytes received\n    \"conntime\": ttt,           (numeric) The connection time in seconds since epoch (Jan 1 1970 GMT)\n    \"timeoffset\": ttt,         (numeric) The time offset in seconds\n    \"pingtime\": n,             (numeric) ping time\n    \"pingwait\": n,             (numeric) ping wait\n    \"version\": v,              (numeric) The peer version, such as 170002\n    \"subver\": \"/MagicBean:x.y.z[-v]/\",  (string) The string version\n    \"inbound\": true|false,     (boolean) Inbound (true) or Outbound (false)\n    \"startingheight\": n,       (numeric) The starting height (block) of the peer\n    \"banscore\": n,             (numeric) The ban score\n    \"synced_headers\": n,       (numeric) The last header we have in common with this peer\n    \"synced_blocks\": n,        (numeric) The last block we have in common with this peer\n    \"inflight\": [\n       n,                        (numeric) The heights of blocks we're currently asking from this peer\n       ...\n    ]\n  }\n  ,...\n]\n\nExamples:\n> zcash-cli getpeerinfo \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getpeerinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"listbanned","args":"","summary":"List all banned IPs/Subnets.","help":"listbanned\n\nList all banned IPs/Subnets.\n\nExamples:\n> zcash-cli listbanned \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listbanned\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"ping","args":"","summary":"Requests that a ping be sent to all other nodes, to measure ping time.Results provided in getpeerinfo, pingtime and pingwait fields are decimal seconds.Ping command is handled in queue with all other commands, so it measures processing backlog, not just network ping.","help":"ping\n\nRequests that a ping be sent to all other nodes, to measure ping time.\nResults provided in getpeerinfo, pingtime and pingwait fields are decimal seconds.\nPing command is handled in queue with all other commands, so it measures processing backlog, not just network ping.\n\nExamples:\n> zcash-cli ping \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"ping\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"setban","args":"\"ip(/netmask)\" \"add|remove\" (bantime) (absolute)","summary":"Attempts to add or remove an IP/Subnet from the banned list.","help":"setban \"ip(/netmask)\" \"add|remove\" (bantime) (absolute)\n\nAttempts to add or remove an IP/Subnet from the banned list.\n\nArguments:\n1. \"ip(/netmask)\" (string, required) The IP/Subnet (see getpeerinfo for nodes IP) with an optional netmask (default is /32 = single IP)\n2. \"command\"      (string, required) 'add' to add an IP/Subnet to the list, 'remove' to remove an IP/Subnet from the list\n3. \"bantime\"      (numeric, optional) time in seconds how long (or until when if [absolute] is set) the IP is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument)\n4. \"absolute\"     (boolean, optional) If set, the bantime must be an absolute timestamp in seconds since epoch (Jan 1 1970 GMT)\n\nExamples:\n> zcash-cli setban \"192.168.0.6\" \"add\" 86400\n> zcash-cli setban \"192.168.0.0/24\" \"add\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setban\", \"params\": [\"192.168.0.6\", \"add\" 86400] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false}]},{"category":"Rawtransactions","calls":[{"name":"createrawtransaction","args":"[{\"txid\":\"id\",\"vout\":n},...] {\"address\":amount,...} ( locktime ) ( expiryheight )","summary":"Create a transaction spending the given inputs and sending to the given addresses.Returns hex-encoded raw transaction.Note that the transaction's inputs are not signed, andit is not stored in the wallet or transmitted to the network.","help":"createrawtransaction [{\"txid\":\"id\",\"vout\":n},...] {\"address\":amount,...} ( locktime ) ( expiryheight )\n\nCreate a transaction spending the given inputs and sending to the given addresses.\nReturns hex-encoded raw transaction.\nNote that the transaction's inputs are not signed, and\nit is not stored in the wallet or transmitted to the network.\n\nArguments:\n1. \"transactions\"        (string, required) A json array of json objects\n     [\n       {\n         \"txid\":\"id\",    (string, required) The transaction id\n         \"vout\":n        (numeric, required) The output number\n         \"sequence\":n    (numeric, optional) The sequence number\n       }\n       ,...\n     ]\n2. \"addresses\"           (string, required) a json object with addresses as keys and amounts as values\n    {\n      \"address\": x.xxx   (numeric, required) The key is the Zcash address, the value is the ZEC amount\n      ,...\n    }\n3. locktime              (numeric, optional, default=0) Raw locktime. Non-0 value also locktime-activates inputs\n4. expiryheight          (numeric, optional, default=nextblockheight+20 (pre-Blossom) or nextblockheight+40 (post-Blossom)) Expiry height of transaction (if Overwinter is active)\n\nResult:\n\"transaction\"            (string) hex string of the transaction\n\nExamples\n> zcash-cli createrawtransaction \"[{\\\"txid\\\":\\\"myid\\\",\\\"vout\\\":0}]\" \"{\\\"address\\\":0.01}\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createrawtransaction\", \"params\": [\"[{\\\"txid\\\":\\\"myid\\\",\\\"vout\\\":0}]\", \"{\\\"address\\\":0.01}\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"decoderawtransaction","args":"\"hexstring\"","summary":"Return a JSON object representing the serialized, hex-encoded transaction.","help":"decoderawtransaction \"hexstring\"\n\nReturn a JSON object representing the serialized, hex-encoded transaction.\n\nArguments:\n1. \"hex\"      (string, required) The transaction hex string\n\nResult:\n{\n  \"txid\" : \"id\",        (string) The transaction id\n  \"authdigest\" : \"id\",  (string) The transaction's auth digest. For pre-v5 txs this is ffff..ffff\n  \"size\" : n,             (numeric) The transaction size\n  \"overwintered\" : bool   (boolean) The Overwintered flag\n  \"version\" : n,          (numeric) The version\n  \"versiongroupid\": \"hex\"   (string, optional) The version group id (Overwintered txs)\n  \"locktime\" : ttt,       (numeric) The lock time\n  \"expiryheight\" : n,     (numeric, optional) Last valid block height for mining transaction (Overwintered txs)\n  \"vin\" : [               (array of json objects)\n     {\n       \"txid\": \"id\",    (string) The transaction id\n       \"vout\": n,         (numeric) The output number\n       \"scriptSig\": {     (json object) The script\n         \"asm\": \"asm\",  (string) asm\n         \"hex\": \"hex\"   (string) hex\n       },\n       \"sequence\": n     (numeric) The script sequence number\n     }\n     ,...\n  ],\n  \"vout\" : [             (array of json objects)\n     {\n       \"value\" : x.xxx,            (numeric) The value in ZEC\n       \"n\" : n,                    (numeric) index\n       \"scriptPubKey\" : {          (json object)\n         \"asm\" : \"asm\",          (string) the asm\n         \"hex\" : \"hex\",          (string) the hex\n         \"reqSigs\" : n,            (numeric) The required sigs\n         \"type\" : \"pubkeyhash\",  (string) The type, eg 'pubkeyhash'\n         \"addresses\" : [           (json array of string)\n           \"t12tvKAXCxZjSmdNbao16dKXC8tRWfcF5oc\"   (string) zcash address\n           ,...\n         ]\n       }\n     }\n     ,...\n  ],\n  \"vjoinsplit\" : [        (array of json objects, only for version >= 2)\n     {\n       \"vpub_old\" : x.xxx,         (numeric) public input value in ZEC\n       \"vpub_new\" : x.xxx,         (numeric) public output value in ZEC\n       \"anchor\" : \"hex\",         (string) the anchor\n       \"nullifiers\" : [            (json array of string)\n         \"hex\"                     (string) input note nullifier\n         ,...\n       ],\n       \"commitments\" : [           (json array of string)\n         \"hex\"                     (string) output note commitment\n         ,...\n       ],\n       \"onetimePubKey\" : \"hex\",  (string) the onetime public key used to encrypt the ciphertexts\n       \"randomSeed\" : \"hex\",     (string) the random seed\n       \"macs\" : [                  (json array of string)\n         \"hex\"                     (string) input note MAC\n         ,...\n       ],\n       \"proof\" : \"hex\",          (string) the zero-knowledge proof\n       \"ciphertexts\" : [           (json array of string)\n         \"hex\"                     (string) output note ciphertext\n         ,...\n       ]\n     }\n     ,...\n  ],\n}\n\nExamples:\n> zcash-cli decoderawtransaction \"hexstring\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"decoderawtransaction\", \"params\": [\"hexstring\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"decodescript","args":"\"hex\"","summary":"Decode a hex-encoded script.","help":"decodescript \"hex\"\n\nDecode a hex-encoded script.\n\nArguments:\n1. \"hex\"     (string) the hex encoded script\n\nResult:\n{\n  \"asm\":\"asm\",   (string) Script public key\n  \"hex\":\"hex\",   (string) hex encoded public key\n  \"type\":\"type\", (string) The output type\n  \"reqSigs\": n,    (numeric) The required signatures\n  \"addresses\": [   (json array of string)\n     \"address\"     (string) Zcash address\n     ,...\n  ],\n  \"p2sh\",\"address\" (string) script address\n}\n\nExamples:\n> zcash-cli decodescript \"hexstring\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"decodescript\", \"params\": [\"hexstring\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"fundrawtransaction","args":"\"hexstring\" includeWatching","summary":"Add transparent inputs to a transaction until it has enough in value to meet its out value.This will not modify existing inputs, and will add one change output to the outputs.Note that inputs which were signed may need to be resigned after completion since in/outputs have been added.The inputs added will not be signed, use signrawtransaction for that.Note that all existing inputs must have their previous output transaction be in the wallet.Note that all inputs selected must be of standard form and P2SH scripts must bein the wallet using importaddress or addmultisigaddress (to calculate fees).Only pay-to-pubkey, multisig, and P2SH versions thereof are currently supported for watch-only","help":"fundrawtransaction \"hexstring\" includeWatching\n\nAdd transparent inputs to a transaction until it has enough in value to meet its out value.\nThis will not modify existing inputs, and will add one change output to the outputs.\nNote that inputs which were signed may need to be resigned after completion since in/outputs have been added.\nThe inputs added will not be signed, use signrawtransaction for that.\nNote that all existing inputs must have their previous output transaction be in the wallet.\nNote that all inputs selected must be of standard form and P2SH scripts must bein the wallet using importaddress or addmultisigaddress (to calculate fees).\nOnly pay-to-pubkey, multisig, and P2SH versions thereof are currently supported for watch-only\n\nArguments:\n1. \"hexstring\"     (string, required) The hex string of the raw transaction\n2. includeWatching (boolean, optional, default false) Also select inputs which are watch only\n\nResult:\n{\n  \"hex\":       \"value\", (string)  The resulting raw transaction (hex-encoded string)\n  \"fee\":       n,         (numeric) The fee added to the transaction\n  \"changepos\": n          (numeric) The position of the added change output, or -1\n}\n\"hex\"             \n\nExamples:\n\nCreate a transaction with no inputs\n> zcash-cli createrawtransaction \"[]\" \"{\\\"myaddress\\\":0.01}\"\n\nAdd sufficient unsigned inputs to meet the output value\n> zcash-cli fundrawtransaction \"rawtransactionhex\"\n\nSign the transaction\n> zcash-cli signrawtransaction \"fundedtransactionhex\"\n\nSend the transaction\n> zcash-cli sendrawtransaction \"signedtransactionhex\"\n\n","deprecated":false},{"name":"getrawtransaction","args":"\"txid\" ( verbose \"blockhash\" )","summary":"NOTE: If \"blockhash\" is not provided and the -txindex option is not enabled, then this call onlyworks for mempool transactions. If either \"blockhash\" is provided or the -txindex option isenabled, it also works for blockchain transactions. If the block which contains the transactionis known, its hash can be provided even for nodes without -txindex. Note that if a blockhash isprovided, only that block will be searched and if the transaction is in the mempool or otherblocks, or if this node does not have the given block available, the transaction will not be found.","help":"getrawtransaction \"txid\" ( verbose \"blockhash\" )\n\nNOTE: If \"blockhash\" is not provided and the -txindex option is not enabled, then this call only\nworks for mempool transactions. If either \"blockhash\" is provided or the -txindex option is\nenabled, it also works for blockchain transactions. If the block which contains the transaction\nis known, its hash can be provided even for nodes without -txindex. Note that if a blockhash is\nprovided, only that block will be searched and if the transaction is in the mempool or other\nblocks, or if this node does not have the given block available, the transaction will not be found.\n\nReturn the raw transaction data.\n\nIf verbose=0, returns a string that is serialized, hex-encoded data for 'txid'.\nIf verbose is non-zero, returns an Object with information about 'txid'.\n\nArguments:\n1. \"txid\"      (string, required) The transaction id\n2. verbose     (numeric, optional, default=0) If 0, return a string of hex-encoded data, otherwise return a JSON object\n3. \"blockhash\" (string, optional) The block in which to look for the transaction\n\nResult (if verbose is not set or set to 0):\n\"data\"      (string) The serialized, hex-encoded data for 'txid'\n\nResult (if verbose > 0):\n{\n  \"in_active_chain\": b,        (bool) Whether specified block is in the active chain or not (only present with explicit \"blockhash\" argument)\n  \"hex\" : \"data\",              (string) The serialized, hex-encoded data for 'txid'\n  \"txid\" : \"id\",               (string) The transaction id (same as provided)\n  \"authdigest\" : \"id\",         (string) The transaction's auth digest. For pre-v5 transactions this will be ffff..ffff\n  \"size\" : n,                  (numeric) The transaction size\n  \"overwintered\" : b,          (bool, optional) Whether the overwintered flag is set\n  \"version\" : n,               (numeric) The version\n  \"versiongroupid\" : \"hex\",    (string, optional) The version group ID\n  \"locktime\" : ttt,            (numeric) The lock time\n  \"expiryheight\" : ttt,        (numeric, optional) The block height after which the transaction expires\n  \"vin\" : [                    (array of json objects)\n     {                    (coinbase transactions)\n       \"coinbase\": \"hex\", (string) The coinbase scriptSig as hex\n       \"sequence\": n      (numeric) The script sequence number\n     },\n     {                    (non-coinbase transactions)\n       \"txid\": \"id\",      (string) The transaction id\n       \"vout\": n,         (numeric) \n       \"scriptSig\": {     (json object) The script\n         \"asm\": \"asm\",    (string) asm\n         \"hex\": \"hex\"     (string) hex\n       },\n       \"sequence\": n      (numeric) The script sequence number\n       \"value\": n         (numeric, optional) The value of the output being spent in ZEC\n       \"valueSat\": n      (numeric, optional) The value of the output being spent, in zats\n       \"address\": n       (string, optional) The address of the output being spent\n     }\n     ,...\n  ],\n  \"vout\" : [              (array of json objects)\n     {\n       \"value\" : x.xxx,            (numeric) The value in ZEC\n       \"valueZat\" : n,             (numeric) The value in zats\n       \"valueSat\" : n,             (numeric) The value in zats\n       \"n\" : n,                    (numeric) index\n       \"scriptPubKey\" : {          (json object)\n         \"asm\" : \"asm\",            (string) the asm\n         \"hex\" : \"hex\",            (string) the hex\n         \"reqSigs\" : n,            (numeric) The required sigs\n         \"type\" : \"pubkeyhash\",    (string) The type, eg 'pubkeyhash'\n         \"addresses\" : [           (json array of string)\n           \"zcashaddress\"          (string) Zcash address\n           ,...\n         ]\n       }\n     }\n     ,...\n  ],\n  \"vjoinsplit\" : [        (array of json objects, only for version >= 2)\n     {\n       \"vpub_old\" : x.xxx,         (numeric) public input value in ZEC\n       \"vpub_oldZat\" : n,          (numeric) public input value in zats\n       \"vpub_new\" : x.xxx,         (numeric) public output value in ZEC\n       \"vpub_newZat\" : n,          (numeric) public output value in zats\n       \"anchor\" : \"hex\",           (string) the anchor\n       \"nullifiers\" : [            (json array of string)\n         \"hex\"                     (string) input note nullifier\n         ,...\n       ],\n       \"commitments\" : [           (json array of string)\n         \"hex\"                     (string) output note commitment\n         ,...\n       ],\n       \"onetimePubKey\" : \"hex\",    (string) the onetime public key used to encrypt the ciphertexts\n       \"randomSeed\" : \"hex\",       (string) the random seed\n       \"macs\" : [                  (json array of string)\n         \"hex\"                     (string) input note MAC\n         ,...\n       ],\n       \"proof\" : \"hex\",            (string) the zero-knowledge proof\n       \"ciphertexts\" : [           (json array of string)\n         \"hex\"                     (string) output note ciphertext\n         ,...\n       ]\n     }\n     ,...\n  ],\n  \"valueBalance\" : x.xxx,  (numeric, optional) The net value of Sapling Spends minus Outputs in ZEC\n  \"valueBalanceZat\" : n,   (numeric, optional) The net value of Sapling Spends minus Outputs in zatoshis\n  \"vShieldedSpend\" : [     (array of json objects, only for version >= 3)\n     {\n       \"cv\" : \"hex\",           (string) Value commitment to the input note\n       \"anchor\" : \"hex\",       (string) Merkle root of the Sapling note commitment tree\n       \"nullifier\" : \"hex\",    (string) The nullifier of the input note\n       \"rk\" : \"hex\",           (string) The randomized public key for spendAuthSig\n       \"proof\" : \"hex\",        (string) A zero-knowledge proof using the Sapling Spend circuit\n       \"spendAuthSig\" : \"hex\", (string) A signature authorizing this Spend\n     }\n     ,...\n  ],\n  \"vShieldedOutput\" : [            (array of json objects, only for version >= 3)\n     {\n       \"cv\" : \"hex\",             (string) Value commitment to the input note\n       \"cmu\" : \"hex\",            (string) The u-coordinate of the note commitment for the output note\n       \"ephemeralKey\" : \"hex\",   (string) A Jubjub public key\n       \"encCiphertext\" : \"hex\",  (string) The output note encrypted to the recipient\n       \"outCiphertext\" : \"hex\",  (string) A ciphertext enabling the sender to recover the output note\n       \"proof\" : \"hex\",          (string) A zero-knowledge proof using the Sapling Output circuit\n     }\n     ,...\n  ],\n  \"bindingSig\" : \"hash\",          (string, optional) The Sapling binding sig\n  \"orchard\" : {                   (JSON object with Orchard-specific information)\n     \"actions\" : [                (JSON array of objects)\n       {\n         \"cv\" : \"hex\",            (string) A value commitment to the net value of the input note minus the output note\n         \"nullifier\" : \"hex\",     (string) The nullifier of the input note\n         \"rk\" : \"hex\",            (string) The randomized validating key for spendAuthSig\n         \"cmx\" : \"hex\",           (string) The x-coordinate of the note commitment for the output note\n         \"ephemeralKey\" : \"hex\",  (string) An encoding of an ephemeral Pallas public key\n         \"encCiphertext\" : \"hex\", (string) The output note encrypted to the recipient\n         \"outCiphertext\" : \"hex\", (string) A ciphertext enabling the sender to recover the output note\n         \"spendAuthSig\" : \"hex\"   (string) A signature authorizing the spend in this Action\n       }\n       ,...\n     ],\n     \"valueBalance\" : x.xxx,      (numeric, optional) The net value of Orchard Actions in ZEC\n     \"valueBalanceZat\" : n,       (numeric, optional) The net value of Orchard Actions in zatoshis\n     \"flags\" : { (optional)\n       \"enableSpends\"  : true|false (bool)\n       \"enableOutputs\" : true|false (bool)\n     },\n     \"anchor\" : \"hex\",          (string, optional) A root of the Orchard note commitment tree at some block height in the past\n     \"proof\" : \"hex\",           (string, optional) Encoding of aggregated zk-SNARK proofs for Orchard Actions\n     \"bindingSig\" : \"hex\"       (string, optional) An Orchard binding signature on the SIGHASH transaction hash\n  },\n  \"joinSplitPubKey\" : \"hex\",      (string, optional) An encoding of a JoinSplitSig public validating key\n  \"joinSplitSig\" : \"hex\",         (string, optional) The Sprout binding signature\n  \"blockhash\" : \"hash\",           (string) the block hash\n  \"height\" : n,                   (numeric) the block height\n  \"confirmations\" : n,            (numeric) The confirmations\n  \"time\" : ttt,                   (numeric) The transaction time in seconds since epoch (Jan 1 1970 GMT)\n  \"blocktime\" : ttt               (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\n}\n\nExamples:\n> zcash-cli getrawtransaction \"mytxid\"\n> zcash-cli getrawtransaction \"mytxid\" 1\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getrawtransaction\", \"params\": [\"mytxid\", 1] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n> zcash-cli getrawtransaction \"mytxid\" 0 \"myblockhash\"\n> zcash-cli getrawtransaction \"mytxid\" 1 \"myblockhash\"\n\n","deprecated":false},{"name":"sendrawtransaction","args":"\"hexstring\" ( allowhighfees )","summary":"Submits raw transaction (serialized, hex-encoded) to local node and network.","help":"sendrawtransaction \"hexstring\" ( allowhighfees )\n\nSubmits raw transaction (serialized, hex-encoded) to local node and network.\n\nAlso see createrawtransaction and signrawtransaction calls.\n\nArguments:\n1. \"hexstring\"    (string, required) The hex string of the raw transaction)\n2. allowhighfees    (boolean, optional, default=false) Allow high fees\n\nResult:\n\"hex\"             (string) The transaction hash in hex\n\nExamples:\n\nCreate a transaction\n> zcash-cli createrawtransaction \"[{\\\"txid\\\" : \\\"mytxid\\\",\\\"vout\\\":0}]\" \"{\\\"myaddress\\\":0.01}\"\nSign the transaction, and get back the hex\n> zcash-cli signrawtransaction \"myhex\"\n\nSend the transaction (signed hex)\n> zcash-cli sendrawtransaction \"signedhex\"\n\nAs a json rpc call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendrawtransaction\", \"params\": [\"signedhex\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"signrawtransaction","args":"\"hexstring\" ( [{\"txid\":\"id\",\"vout\":n,\"scriptPubKey\":\"hex\",\"redeemScript\":\"hex\"},...] [\"privatekey1\",...] sighashtype )","summary":"Sign inputs for raw transaction (serialized, hex-encoded).The second optional argument (may be null) is an array of previous transaction outputs thatthis transaction depends on but may not yet be in the block chain.The third optional argument (may be null) is an array of base58-encoded privatekeys that, if given, will be the only keys used to sign the transaction.","help":"signrawtransaction \"hexstring\" ( [{\"txid\":\"id\",\"vout\":n,\"scriptPubKey\":\"hex\",\"redeemScript\":\"hex\"},...] [\"privatekey1\",...] sighashtype )\n\nSign inputs for raw transaction (serialized, hex-encoded).\nThe second optional argument (may be null) is an array of previous transaction outputs that\nthis transaction depends on but may not yet be in the block chain.\nThe third optional argument (may be null) is an array of base58-encoded private\nkeys that, if given, will be the only keys used to sign the transaction.\n\n\nArguments:\n1. \"hexstring\"     (string, required) The transaction hex string\n2. \"prevtxs\"       (string, optional) An json array of previous dependent transaction outputs\n     [               (json array of json objects, or 'null' if none provided)\n       {\n         \"txid\":\"id\",             (string, required) The transaction id\n         \"vout\":n,                  (numeric, required) The output number\n         \"scriptPubKey\": \"hex\",   (string, required) script key\n         \"redeemScript\": \"hex\",   (string, required for P2SH) redeem script\n         \"amount\": value            (numeric, required) The amount spent\n       }\n       ,...\n    ]\n3. \"privatekeys\"     (string, optional) A json array of base58-encoded private keys for signing\n    [                  (json array of strings, or 'null' if none provided)\n      \"privatekey\"   (string) private key in base58-encoding\n      ,...\n    ]\n4. \"sighashtype\"     (string, optional, default=ALL) The signature hash type. Must be one of\n       \"ALL\"\n       \"NONE\"\n       \"SINGLE\"\n       \"ALL|ANYONECANPAY\"\n       \"NONE|ANYONECANPAY\"\n       \"SINGLE|ANYONECANPAY\"\n5.  \"branchid\"       (string, optional) The hex representation of the consensus branch id to sign with. This can be used to force signing with consensus rules that are ahead of the node's current height.\n\nResult:\n{\n  \"hex\" : \"value\",           (string) The hex-encoded raw transaction with signature(s)\n  \"complete\" : true|false,   (boolean) If the transaction has a complete set of signatures\n  \"errors\" : [                 (json array of objects) Script verification errors (if there are any)\n    {\n      \"txid\" : \"hash\",           (string) The hash of the referenced, previous transaction\n      \"vout\" : n,                (numeric) The index of the output to spent and used as input\n      \"scriptSig\" : \"hex\",       (string) The hex-encoded signature script\n      \"sequence\" : n,            (numeric) Script sequence number\n      \"error\" : \"text\"           (string) Verification or signing error related to the input\n    }\n    ,...\n  ]\n}\n\nExamples:\n> zcash-cli signrawtransaction \"myhex\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signrawtransaction\", \"params\": [\"myhex\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false}]},{"category":"Util","calls":[{"name":"createmultisig","args":"nrequired [\"key\",...]","summary":"Creates a multi-signature address with n signature of m keys required.It returns a json object with the address and redeemScript.","help":"createmultisig nrequired [\"key\",...]\n\nCreates a multi-signature address with n signature of m keys required.\nIt returns a json object with the address and redeemScript.\n\nArguments:\n1. nrequired      (numeric, required) The number of required signatures out of the n keys or addresses.\n2. \"keys\"       (string, required) A json array of keys which are Zcash addresses or hex-encoded public keys\n     [\n       \"key\"    (string) Zcash address or hex-encoded public key\n       ,...\n     ]\n\nResult:\n{\n  \"address\":\"multisigaddress\",  (string) The value of the new multisig address.\n  \"redeemScript\":\"script\"       (string) The string value of the hex-encoded redemption script.\n}\n\nExamples:\n\nCreate a multisig address from 2 addresses\n> zcash-cli createmultisig 2 \"[\\\"t16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\\\",\\\"t171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\\\"]\"\n\nAs a json rpc call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createmultisig\", \"params\": [2, \"[\\\"t16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\\\",\\\"t171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\\\"]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"estimatefee","args":"nblocks","summary":"Estimates the approximate fee per kilobyteneeded for a transaction to begin confirmationwithin nblocks blocks.","help":"estimatefee nblocks\n\nEstimates the approximate fee per kilobyte\nneeded for a transaction to begin confirmation\nwithin nblocks blocks.\n\nArguments:\n1. nblocks     (numeric)\n\nResult:\nn :    (numeric) estimated fee-per-kilobyte\n\n-1.0 is returned if not enough transactions and\nblocks have been observed to make an estimate.\n\nExample:\n> zcash-cli estimatefee 6\n\n","deprecated":false},{"name":"estimatepriority","args":"nblocks","summary":"Estimates the approximate prioritya zero-fee transaction needs to begin confirmationwithin nblocks blocks.","help":"estimatepriority nblocks\n\nEstimates the approximate priority\na zero-fee transaction needs to begin confirmation\nwithin nblocks blocks.\n\nArguments:\n1. nblocks     (numeric)\n\nResult:\nn :    (numeric) estimated priority\n\n-1.0 is returned if not enough transactions and\nblocks have been observed to make an estimate.\n\nExample:\n> zcash-cli estimatepriority 6\n\n","deprecated":false},{"name":"validateaddress","args":"\"zcashaddress\"","summary":"Return information about the given Zcash address.","help":"validateaddress \"zcashaddress\"\n\nReturn information about the given Zcash address.\n\nArguments:\n1. \"zcashaddress\"     (string, required) The Zcash address to validate\n\nResult:\n{\n  \"isvalid\" : true|false,         (boolean) If the address is valid or not. If not, this is the only property returned.\n  \"address\" : \"zcashaddress\",   (string) The Zcash address validated\n  \"scriptPubKey\" : \"hex\",       (string) The hex encoded scriptPubKey generated by the address\n  \"ismine\" : true|false,          (boolean) If the address is yours or not\n  \"isscript\" : true|false,        (boolean) If the key is a script\n  \"pubkey\" : \"publickeyhex\",    (string) The hex value of the raw public key\n  \"iscompressed\" : true|false,    (boolean) If the address is compressed\n  \"account\" : \"account\"         (string) DEPRECATED. The account associated with the address, \"\" is the default account\n}\n\nExamples:\n> zcash-cli validateaddress \"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"validateaddress\", \"params\": [\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"verifymessage","args":"\"zcashaddress\" \"signature\" \"message\"","summary":"Verify a signed message","help":"verifymessage \"zcashaddress\" \"signature\" \"message\"\n\nVerify a signed message\n\nArguments:\n1. \"zcashaddress\"    (string, required) The Zcash address to use for the signature.\n2. \"signature\"       (string, required) The signature provided by the signer in base 64 encoding (see signmessage).\n3. \"message\"         (string, required) The message that was signed.\n\nResult:\ntrue|false   (boolean) If the signature is verified or not.\n\nExamples:\n\nUnlock the wallet for 30 seconds\n> zcash-cli walletpassphrase \"mypassphrase\" 30\n\nCreate the signature\n> zcash-cli signmessage \"t14oHp2v54vfmdgQ3v3SNuQga8JKHTNi2a1\" \"my message\"\n\nVerify the signature\n> zcash-cli verifymessage \"t14oHp2v54vfmdgQ3v3SNuQga8JKHTNi2a1\" \"signature\" \"my message\"\n\nAs json rpc\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifymessage\", \"params\": [\"t14oHp2v54vfmdgQ3v3SNuQga8JKHTNi2a1\", \"signature\", \"my message\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"z_validateaddress","args":"\"address\"","summary":"Return information about the given address.","help":"z_validateaddress \"address\"\n\nReturn information about the given address.\n\nArguments:\n1. \"address\"   (string, required) The address to validate\n\nResult:\n{\n  \"isvalid\" : true|false,        (boolean) If the address is valid or not. If not, this is the only property returned.\n  \"address\" : \"addr\",          (string) The address validated\n  \"address_type\" : \"xxxx\",     (string) \"p2pkh\", \"p2sh\", \"sprout\" or \"sapling\"\n  \"type\" : \"xxxx\",             (string) \"p2pkh\", \"p2sh\", \"sprout\" or \"sapling\" (DEPRECATED, legacy attribute)\n  \"ismine\" : true|false,         (boolean) If the address is yours or not\n  \"payingkey\" : \"hex\",         (string) [sprout] The hex value of the paying key, a_pk\n  \"transmissionkey\" : \"hex\",   (string) [sprout] The hex value of the transmission key, pk_enc\n  \"diversifier\" : \"hex\",       (string) [sapling] The hex value of the diversifier, d\n  \"diversifiedtransmissionkey\" : \"hex\", (string) [sapling] The hex value of pk_d\n}\n\nExamples:\n> zcash-cli z_validateaddress \"zcWsmqT4X2V4jgxbgiCzyrAfRT1vi1F4sn7M5Pkh66izzw8Uk7LBGAH3DtcSMJeUb2pi3W4SQF8LMKkU2cUuVP68yAGcomL\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_validateaddress\", \"params\": [\"zcWsmqT4X2V4jgxbgiCzyrAfRT1vi1F4sn7M5Pkh66izzw8Uk7LBGAH3DtcSMJeUb2pi3W4SQF8LMKkU2cUuVP68yAGcomL\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false}]},{"category":"Wallet","calls":[{"name":"addmultisigaddress","args":"nrequired [\"key\",...] ( \"\" )","summary":"Add a nrequired-to-sign transparent multisignature address to the wallet.Each key is a transparent Zcash address or hex-encoded secp256k1 public key.","help":"addmultisigaddress nrequired [\"key\",...] ( \"\" )\n\nAdd a nrequired-to-sign transparent multisignature address to the wallet.\nEach key is a transparent Zcash address or hex-encoded secp256k1 public key.\n\nArguments:\n1. nrequired        (numeric, required) The number of required signatures out of the n keys or addresses.\n2. \"keysobject\"   (string, required) A json array of Zcash addresses or hex-encoded public keys\n     [\n       \"address\"  (string) Zcash address or hex-encoded public key\n       ...,\n     ]\n3. (dummy)        (string, optional) DEPRECATED. If provided, MUST be set to the empty string \"\".\nResult:\n\"zcashaddress\"  (string) A Zcash address associated with the keys.\n\nExamples:\n\nAdd a multisig address from 2 addresses\n> zcash-cli addmultisigaddress 2 \"[\\\"t16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\\\",\\\"t171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\\\"]\"\n\nAs json rpc call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"addmultisigaddress\", \"params\": [2, \"[\\\"t16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\\\",\\\"t171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\\\"]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"backupwallet","args":"\"destination\"","summary":"Safely copies current wallet file to destination filename","help":"backupwallet \"destination\"\n\nSafely copies current wallet file to destination filename\n\nArguments:\n1. \"destination\"   (string, required) The destination filename, saved in the directory set by -exportdir option.\n\nResult:\n\"path\"             (string) The full path of the destination file\n\nExamples:\n> zcash-cli backupwallet \"backupdata\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"backupwallet\", \"params\": [\"backupdata\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"dumpprivkey","args":"\"t-addr\"","summary":"Reveals the private key corresponding to 't-addr'.Then the importprivkey can be used with this output","help":"dumpprivkey \"t-addr\"\n\nReveals the private key corresponding to 't-addr'.\nThen the importprivkey can be used with this output\n\nArguments:\n1. \"t-addr\"   (string, required) The transparent address for the private key\n\nResult:\n\"key\"         (string) The private key\n\nExamples:\n> zcash-cli dumpprivkey \"myaddress\"\n> zcash-cli importprivkey \"mykey\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"dumpprivkey\", \"params\": [\"myaddress\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"encryptwallet","args":"\"passphrase\"","summary":"WARNING: encryptwallet is disabled.To enable it, restart zcashd with the following command line options:-experimentalfeatures and -developerencryptwallet","help":"encryptwallet \"passphrase\"\n\nWARNING: encryptwallet is disabled.\nTo enable it, restart zcashd with the following command line options:\n-experimentalfeatures and -developerencryptwallet\n\nAlternatively add these two lines to the zcash.conf file:\n\nexperimentalfeatures=1\ndeveloperencryptwallet=1\n\nEncrypts the wallet with 'passphrase'. This is for first time encryption.\nAfter this, any calls that interact with private keys such as sending or signing \nwill require the passphrase to be set prior the making these calls.\nUse the walletpassphrase call for this, and then walletlock call.\nIf the wallet is already encrypted, use the walletpassphrasechange call.\nNote that this will shutdown the server.\nWallet encryption is experimental, and this API should be used with caution.\n\nArguments:\n1. \"passphrase\"    (string) The pass phrase to encrypt the wallet with. It must be at least 1 character, but should be long.\n\nExamples:\n\nEncrypt you wallet\n> zcash-cli encryptwallet \"my pass phrase\"\n\nNow set the passphrase to use the wallet, such as for signing or sending Zcash\n> zcash-cli walletpassphrase \"my pass phrase\"\n\nNow we can so something like sign\n> zcash-cli signmessage \"zcashaddress\" \"test message\"\n\nNow lock the wallet again by removing the passphrase\n> zcash-cli walletlock \n\nAs a JSON RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"encryptwallet\", \"params\": [\"my pass phrase\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"getbalance","args":"( \"(dummy)\" minconf includeWatchonly inZat asOfHeight )","summary":"Returns the wallet's available transparent balance. This totalcurrently includes transparent balances associated with unifiedaccounts. Prefer to use `z_getbalanceforaccount` instead.","help":"getbalance ( \"(dummy)\" minconf includeWatchonly inZat asOfHeight )\n\nReturns the wallet's available transparent balance. This total\ncurrently includes transparent balances associated with unified\naccounts. Prefer to use `z_getbalanceforaccount` instead.\n\nArguments:\n1. (dummy)          (string, optional) Remains for backward compatibility. Must be excluded or set to \"*\" or \"\".\n2. minconf          (numeric, optional, default=0) Only include transactions confirmed at least this many times.\n3. includeWatchonly (bool, optional, default=false) Also include balance in watchonly addresses (see 'importaddress')\n4. inZat            (bool, optional, default=false) Get the result amount in zatoshis (as an integer).\n5. asOfHeight       (numeric, optional, default=-1) Execute the query as if it\n                    were run when the blockchain was at the height specified by\n                    this argument. The default is to use the entire blockchain\n                    that the node is aware of. -1 can be used as in other RPC\n                    calls to indicate the current height (including the\n                    mempool), but this does not support negative values in\n                    general. A “future” height will fall back to the current\n                    height. Any explicit value will cause the mempool to be\n                    ignored, meaning no unconfirmed tx will be considered.\n                    `minconf` must be at least 1 when `asOfHeight` is provided.\n\nResult:\namount              (numeric) The total amount in ZEC(or zatoshis if inZat is true) received.\n\nBitcoin compatibility:\nCompatible with up to three arguments.\nExamples:\n\nThe total amount in the wallet\n> zcash-cli getbalance *\n\nThe total amount in the wallet at least 5 blocks confirmed\n> zcash-cli getbalance \"*\" 6\n\nAs a JSON RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getbalance\", \"params\": [\"*\", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"getnewaddress","args":"is DEPRECATED and will be removed in a future release","summary":"Use z_getnewaccount and z_getaddressforaccount instead, or restart with `-allowdeprecated=getnewaddress` if you require backward compatibility.See https://zcash.github.io/zcash/user/deprecation.html for more information.","help":"getnewaddress is DEPRECATED and will be removed in a future release\n\nUse z_getnewaccount and z_getaddressforaccount instead, or restart \nwith `-allowdeprecated=getnewaddress` if you require backward compatibility.\nSee https://zcash.github.io/zcash/user/deprecation.html for more information.\n","deprecated":true},{"name":"getrawchangeaddress","args":"is DEPRECATED and will be removed in a future release","summary":"Change addresses are a wallet-internal feature. Use a unified address fora dedicated change account instead, or restart with `-allowdeprecated=getrawchangeaddress` if you require backward compatibility.See https://zcash.github.io/zcash/user/deprecation.html for more information.","help":"getrawchangeaddress is DEPRECATED and will be removed in a future release\n\nChange addresses are a wallet-internal feature. Use a unified address for\na dedicated change account instead, or restart with `-allowdeprecated=getrawchangeaddress` \nif you require backward compatibility.\nSee https://zcash.github.io/zcash/user/deprecation.html for more information.\n","deprecated":true},{"name":"getreceivedbyaddress","args":"\"zcashaddress\" ( minconf inZat asOfHeight )","summary":"Returns the total amount received by the given transparent Zcash address in transactions with at least minconf confirmations.","help":"getreceivedbyaddress \"zcashaddress\" ( minconf inZat asOfHeight )\n\nReturns the total amount received by the given transparent Zcash address in transactions with at least minconf confirmations.\n\nArguments:\n1. \"zcashaddress\"  (string, required) The Zcash address for transactions.\n2. minconf         (numeric, optional, default=1) Only include transactions confirmed at least this many times.\n3. inZat           (bool, optional, default=false) Get the result amount in zatoshis (as an integer).\n4. asOfHeight       (numeric, optional, default=-1) Execute the query as if it\n                    were run when the blockchain was at the height specified by\n                    this argument. The default is to use the entire blockchain\n                    that the node is aware of. -1 can be used as in other RPC\n                    calls to indicate the current height (including the\n                    mempool), but this does not support negative values in\n                    general. A “future” height will fall back to the current\n                    height. Any explicit value will cause the mempool to be\n                    ignored, meaning no unconfirmed tx will be considered.\n                    `minconf` must be at least 1 when `asOfHeight` is provided.\n\nResult:\namount   (numeric) The total amount in ZEC(or zatoshis if inZat is true) received at this address.\n\nBitcoin compatibility:\nCompatible with up to two arguments.\nExamples:\n\nThe amount from transactions with at least 1 confirmation\n> zcash-cli getreceivedbyaddress \"t14oHp2v54vfmdgQ3v3SNuQga8JKHTNi2a1\"\n\nThe amount including unconfirmed transactions, zero confirmations\n> zcash-cli getreceivedbyaddress \"t14oHp2v54vfmdgQ3v3SNuQga8JKHTNi2a1\" 0\n\nThe amount with at least 6 confirmations, very safe\n> zcash-cli getreceivedbyaddress \"t14oHp2v54vfmdgQ3v3SNuQga8JKHTNi2a1\" 6\n\nAs a JSON RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getreceivedbyaddress\", \"params\": [\"t14oHp2v54vfmdgQ3v3SNuQga8JKHTNi2a1\", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"gettransaction","args":"\"txid\" ( includeWatchonly verbose asOfHeight )","summary":"Returns detailed information about in-wallet transaction <txid>. This does notinclude complete information about shielded components of the transaction; to obtaindetails about shielded components of the transaction use `z_viewtransaction`.","help":"gettransaction \"txid\" ( includeWatchonly verbose asOfHeight )\n\nReturns detailed information about in-wallet transaction <txid>. This does not\ninclude complete information about shielded components of the transaction; to obtain\ndetails about shielded components of the transaction use `z_viewtransaction`.\n\nArguments:\n1. \"txid\"    (string, required) The transaction id\n2. includeWatchonly    (bool, optional, default=false) Whether to include watchonly addresses in balance calculation and details[]\n3. verbose       (bool, optional, default=false) Whether to include a `decoded` field containing the decoded transaction (equivalent to RPC decoderawtransaction). Currently, only the default value is supported.\n4. asOfHeight       (numeric, optional, default=-1) Execute the query as if it\n                    were run when the blockchain was at the height specified by\n                    this argument. The default is to use the entire blockchain\n                    that the node is aware of. -1 can be used as in other RPC\n                    calls to indicate the current height (including the\n                    mempool), but this does not support negative values in\n                    general. A “future” height will fall back to the current\n                    height. Any explicit value will cause the mempool to be\n                    ignored, meaning no unconfirmed tx will be considered.\n\nResult:\n{\n  \"status\" : \"mined|waiting|expiringsoon|expired\",    (string) The transaction status, can be 'mined', 'waiting', 'expiringsoon' or 'expired'\n  \"version\" : \"x\",       (string) The transaction version\n  \"amount\" : x.xxx,        (numeric) The transaction amount in ZEC\n  \"amountZat\" : x          (numeric) The amount in zatoshis\n  \"confirmations\" : n,     (numeric) The number of confirmations\n  \"blockhash\" : \"hash\",  (string) The block hash\n  \"blockindex\" : xx,       (numeric) The block index\n  \"blocktime\" : ttt,       (numeric) The time in seconds since epoch (1 Jan 1970 GMT)\n  \"txid\" : \"transactionid\",   (string) The transaction id.\n  \"time\" : ttt,            (numeric) The transaction time in seconds since epoch (1 Jan 1970 GMT)\n  \"timereceived\" : ttt,    (numeric) The time received in seconds since epoch (1 Jan 1970 GMT)\n  \"details\" : [\n    {\n      \"address\" : \"zcashaddress\",   (string) The Zcash address involved in the transaction\n      \"category\" : \"send|receive\",    (string) The category, either 'send' or 'receive'\n      \"amount\" : x.xxx                  (numeric) The amount in ZEC\n      \"amountZat\" : x                   (numeric) The amount in zatoshis\n      \"vout\" : n,                       (numeric) the vout value\n    }\n    ,...\n  ],\n  \"vjoinsplit\" : (DEPRECATED) [\n    {\n      \"anchor\" : \"treestateref\",          (string) Merkle root of note commitment tree\n      \"nullifiers\" : [ string, ... ]      (string) Nullifiers of input notes\n      \"commitments\" : [ string, ... ]     (string) Note commitments for note outputs\n      \"macs\" : [ string, ... ]            (string) Message authentication tags\n      \"vpub_old\" : x.xxx                  (numeric) The amount removed from the transparent value pool\n      \"vpub_new\" : x.xxx,                 (numeric) The amount added to the transparent value pool\n    }\n    ,...\n  ],\n  \"hex\" : \"data\"         (string) Raw data for transaction\n}\n\nBitcoin compatibility:\nCompatible up to three arguments, but can only use the default value for `verbose`.\nExamples:\n> zcash-cli gettransaction \"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"\n> zcash-cli gettransaction \"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\" true\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gettransaction\", \"params\": [\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"getunconfirmedbalance","args":"","summary":"","help":"getunconfirmedbalance\nReturns the server's total unconfirmed transparent balance\n\n","deprecated":false},{"name":"getwalletinfo","args":"( asOfHeight )","summary":"Arguments:1. asOfHeight       (numeric, optional, default=-1) Execute the query as if it                    were run when the blockchain was at the height specified by                    this argument. The default is to use the entire blockchain                    that the node is aware of. -1 can be used as in other RPC                    calls to indicate the current height (including the                    mempool), but this does not support negative values in                    general. A “future” height will fall back to the current                    height. Any explicit value will cause the mempool to be                    ignored, meaning no unconfirmed tx will be considered.","help":"getwalletinfo ( asOfHeight )\nReturns wallet state information.\n\nArguments:\n1. asOfHeight       (numeric, optional, default=-1) Execute the query as if it\n                    were run when the blockchain was at the height specified by\n                    this argument. The default is to use the entire blockchain\n                    that the node is aware of. -1 can be used as in other RPC\n                    calls to indicate the current height (including the\n                    mempool), but this does not support negative values in\n                    general. A “future” height will fall back to the current\n                    height. Any explicit value will cause the mempool to be\n                    ignored, meaning no unconfirmed tx will be considered.\n\nResult:\n{\n  \"walletversion\": xxxxx,     (numeric) the wallet version\n  \"balance\": xxxxxxx,         (numeric) the total confirmed transparent balance of the wallet in ZEC\n  \"unconfirmed_balance\": xxx, (numeric, optional) the total unconfirmed transparent balance of the wallet in ZEC.\n                              Not included if `asOfHeight` is specified.\n  \"immature_balance\": xxxxxx, (numeric) the total immature transparent balance of the wallet in ZEC\n  \"shielded_balance\": xxxxxxx,  (numeric) the total confirmed shielded balance of the wallet in ZEC\n  \"shielded_unconfirmed_balance\": xxx, (numeric, optional) the total unconfirmed shielded balance of the wallet in ZEC.\n                              Not included if `asOfHeight` is specified.\n  \"txcount\": xxxxxxx,         (numeric) the total number of transactions in the wallet\n  \"keypoololdest\": xxxxxx,    (numeric) the timestamp (seconds since GMT epoch) of the oldest pre-generated key in the key pool\n  \"keypoolsize\": xxxx,        (numeric) how many new keys are pre-generated\n  \"unlocked_until\": ttt,      (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\n  \"paytxfee\": x.xxxx,         (numeric) the transaction fee configuration, set in ZEC/kB\n  \"mnemonic_seedfp\": \"uint256\", (string) the BLAKE2b-256 hash of the HD seed derived from the wallet's emergency recovery phrase\n  \"legacy_seedfp\": \"uint256\",   (string, optional) if this wallet was created prior to release 4.5.2, this will contain the BLAKE2b-256\n                                    hash of the legacy HD seed that was used to derive Sapling addresses prior to the 4.5.2 upgrade to mnemonic\n                                    emergency recovery phrases. This field was previously named \"seedfp\".\n}\n\nExamples:\n> zcash-cli getwalletinfo \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getwalletinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"importaddress","args":"\"address\" ( \"label\" rescan p2sh )","summary":"Adds a script (in hex) or address that can be watched as if it were in your wallet but cannot be used to spend.","help":"importaddress \"address\" ( \"label\" rescan p2sh )\n\nAdds a script (in hex) or address that can be watched as if it were in your wallet but cannot be used to spend.\n\nArguments:\n1. \"script\"           (string, required) The hex-encoded script (or address)\n2. \"label\"            (string, optional, default=\"\") An optional label\n3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions\n4. p2sh                 (boolean, optional, default=false) Add the P2SH version of the script as well\n\nNote: This call can take a long time to complete if rescan is true.\nIf you have the full public key, you should call importpubkey instead of this.\n\nNote: If you import a non-standard raw script in hex form, outputs sending to it will be treated\nas change, and not show up in many RPCs.\n\nExamples:\n\nImport a script with rescan\n> zcash-cli importaddress \"myscript\"\n\nImport using a label without rescan\n> zcash-cli importaddress \"myscript\" \"testing\" false\n\nAs a JSON-RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importaddress\", \"params\": [\"myscript\", \"testing\", false] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"importprivkey","args":"\"zcashprivkey\" ( \"label\" rescan )","summary":"Adds a private key (as returned by dumpprivkey) to your wallet.","help":"importprivkey \"zcashprivkey\" ( \"label\" rescan )\n\nAdds a private key (as returned by dumpprivkey) to your wallet.\n\nArguments:\n1. \"zcashprivkey\"   (string, required) The private key (see dumpprivkey)\n2. \"label\"            (string, optional, default=\"\") An optional label\n3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions\n\nNote: This call can take a long time to complete if rescan is true.\n\nExamples:\n\nDump a private key\n> zcash-cli dumpprivkey \"myaddress\"\n\nImport the private key with rescan\n> zcash-cli importprivkey \"mykey\"\n\nImport using a label and without rescan\n> zcash-cli importprivkey \"mykey\" \"testing\" false\n\nAs a JSON-RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importprivkey\", \"params\": [\"mykey\", \"testing\", false] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"importpubkey","args":"\"pubkey\" ( \"label\" rescan )","summary":"Adds a public key (in hex) that can be watched as if it were in your wallet but cannot be used to spend.","help":"importpubkey \"pubkey\" ( \"label\" rescan )\n\nAdds a public key (in hex) that can be watched as if it were in your wallet but cannot be used to spend.\n\nArguments:\n1. \"pubkey\"           (string, required) The hex-encoded public key\n2. \"label\"            (string, optional, default=\"\") An optional label\n3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions\n\nNote: This call can take a long time to complete if rescan is true.\n\nExamples:\n\nImport a public key with rescan\n> zcash-cli importpubkey \"mypubkey\"\n\nImport using a label without rescan\n> zcash-cli importpubkey \"mypubkey\" \"testing\" false\n\nAs a JSON-RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importpubkey\", \"params\": [\"mypubkey\", \"testing\", false] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"importwallet","args":"\"filename\"","summary":"Imports taddr keys from a wallet dump file (see z_exportwallet).","help":"importwallet \"filename\"\n\nImports taddr keys from a wallet dump file (see z_exportwallet).\n\nArguments:\n1. \"filename\"    (string, required) The wallet file\n\nExamples:\n\nDump the wallet\n> zcash-cli z_exportwallet \"nameofbackup\"\n\nImport the wallet\n> zcash-cli importwallet \"path/to/exportdir/nameofbackup\"\n\nImport using the json rpc call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importwallet\", \"params\": [\"path/to/exportdir/nameofbackup\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"keypoolrefill","args":"( newsize )","summary":"Fills the keypool associated with the legacy transparent value pool. This should only beused when interoperability with legacy Bitcoin infrastructure is required.","help":"keypoolrefill ( newsize )\n\nFills the keypool associated with the legacy transparent value pool. This should only be\nused when interoperability with legacy Bitcoin infrastructure is required.\n\n\nArguments\n1. newsize     (numeric, optional, default=100) The new keypool size\n\nExamples:\n> zcash-cli keypoolrefill \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"keypoolrefill\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"listaddresses","args":"","summary":"Lists the addresses managed by this wallet by source, including those generated from randomness by this wallet, Sapling addresses generated from the legacy HD seed, imported watchonly transparent addresses, shielded addresses tracked using imported viewing keys, and addresses derived from the wallet's mnemonic seed for releases version 4.7.0 and above. ","help":"listaddresses\n\nLists the addresses managed by this wallet by source, including \nthose generated from randomness by this wallet, Sapling addresses \ngenerated from the legacy HD seed, imported watchonly transparent \naddresses, shielded addresses tracked using imported viewing keys, \nand addresses derived from the wallet's mnemonic seed for releases \nversion 4.7.0 and above. \n\nREMINDER: It is recommended that you back up your wallet.dat file \nregularly. If your wallet was created using zcashd version 4.7.0 \nor later and you have not imported externally produced keys, it only \nnecessary to have backed up the wallet's emergency recovery phrase.\n\nResult:\n[\n  {\n    \"source\": \"imported|imported_watchonly|legacy_random|legacy_seed|mnemonic_seed\"\n    \"transparent\": {\n      \"addresses\": [\"t14oHp2v54vfmdgQ3v3SNuQga8JKHTNi2a1\", ...],\n      \"changeAddresses\": [\"t14oHp2v54vfmdgQ3v3SNuQga8JKHTNi2a1\", ...]\n    },\n    \"sprout\": {\n      \"addresses\": [\"ztbx5DLDxa5ZLFTchHhoPNkKs57QzSyib6UqXpEdy76T1aUdFxJt1w9318Z8DJ73XzbnWHKEZP9Yjg712N5kMmP4QzS9iC9\", ...]\n    },\n    \"sapling\": [ -- each element in this list represents a set of diversified addresses derived from a single IVK. \n      {\n        \"zip32KeyPath\": \"m/32'/133'/0'\", -- optional field, not present for imported/watchonly sources,\n        \"addresses\": [\n          \"zs1z7rejlpsa98s2rrrfkwmaxu53e4ue0ulcrw0h4x5g8jl04tak0d3mm47vdtahatqrlkngh9slya\",\n          ...\n        ]\n      },\n      ...\n    ],\n    \"unified\": [ -- each element in this list represents a set of diversified Unified Addresses derived from a single UFVK.\n      {\n        \"account\": 0,\n        \"seedfp\": \"hexstring\",\n        \"addresses\": [\n          {\n            \"diversifier_index\": 0,\n            \"receiver_types\": [\n              \"sapling\",\n               ...\n            ],\n            \"address\": \"...\"\n          },\n          ...\n        ]\n      },\n      ...\n    ],\n    ...\n  },\n  ...\n]\nIn the case that a source does not have addresses for a value pool, the key\nassociated with that pool will be absent.\n\nExamples:\n> zcash-cli listaddresses \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listaddresses\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"listaddressgroupings","args":"( asOfHeight )","summary":"Lists groups of transparent addresses which have had their common ownershipmade public by common use as inputs or as the resulting change in past transactions.","help":"listaddressgroupings ( asOfHeight )\n\nLists groups of transparent addresses which have had their common ownership\nmade public by common use as inputs or as the resulting change in past transactions.\n\nArguments:\n1. asOfHeight       (numeric, optional, default=-1) Execute the query as if it\n                    were run when the blockchain was at the height specified by\n                    this argument. The default is to use the entire blockchain\n                    that the node is aware of. -1 can be used as in other RPC\n                    calls to indicate the current height (including the\n                    mempool), but this does not support negative values in\n                    general. A “future” height will fall back to the current\n                    height. Any explicit value will cause the mempool to be\n                    ignored, meaning no unconfirmed tx will be considered.\n\nResult:\n[\n  [\n    [\n      \"zcashaddress\",     (string) The zcash address\n      amount,                 (numeric) The amount in ZEC\n    ]\n    ,...\n  ]\n  ,...\n]\n\nBitcoin compatibility:\nThe zero-argument form is compatible.\nExamples:\n> zcash-cli listaddressgroupings \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listaddressgroupings\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"listlockunspent","args":"","summary":"Returns list of temporarily unspendable transparent outputs.See the lockunspent call to lock and unlock transactions for spending.","help":"listlockunspent\n\nReturns list of temporarily unspendable transparent outputs.\nSee the lockunspent call to lock and unlock transactions for spending.\n\nResult:\n[\n  {\n    \"txid\" : \"transactionid\",     (string) The transaction id locked\n    \"vout\" : n                      (numeric) The vout value\n  }\n  ,...\n]\n\nExamples:\n\nList the unspent transactions\n> zcash-cli listunspent \n\nLock an unspent transaction\n> zcash-cli lockunspent false \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\"\n\nList the locked transactions\n> zcash-cli listlockunspent \n\nUnlock the transaction again\n> zcash-cli lockunspent true \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\"\n\nAs a JSON RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listlockunspent\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"listreceivedbyaddress","args":"( minconf includeempty includeWatchonly addressFilter includeImmatureCoinbase asOfHeight )","summary":"List balances by transparent receiving address. This API does not provideany information for associated with shielded addresses and should only be usedin circumstances where it is necessary to interoperate with legacy Bitcoininfrastructure.","help":"listreceivedbyaddress ( minconf includeempty includeWatchonly addressFilter includeImmatureCoinbase asOfHeight )\n\nList balances by transparent receiving address. This API does not provide\nany information for associated with shielded addresses and should only be used\nin circumstances where it is necessary to interoperate with legacy Bitcoin\ninfrastructure.\n\nArguments:\n1. minconf       (numeric, optional, default=1) The minimum number of confirmations before payments are included.\n2. includeempty  (numeric, optional, default=false) Whether to include addresses that haven't received any payments.\n3. includeWatchonly (bool, optional, default=false) Whether to include watchonly addresses (see 'importaddress').\n4. addressFilter (string, optional, default=\"\") If present and non-empty, only return information on this address. Currently, only the default value is supported.\n5. includeImmatureCoinbase (bool, optional, default=false) Include immature coinbase transactions. Currently, only the default value is supported.\n6. asOfHeight       (numeric, optional, default=-1) Execute the query as if it\n                    were run when the blockchain was at the height specified by\n                    this argument. The default is to use the entire blockchain\n                    that the node is aware of. -1 can be used as in other RPC\n                    calls to indicate the current height (including the\n                    mempool), but this does not support negative values in\n                    general. A “future” height will fall back to the current\n                    height. Any explicit value will cause the mempool to be\n                    ignored, meaning no unconfirmed tx will be considered.\n                    `minconf` must be at least 1 when `asOfHeight` is provided.\n\nResult:\n[\n  {\n    \"involvesWatchonly\" : true,        (bool) Only returned if imported addresses were involved in transaction\n    \"address\" : \"receivingaddress\",  (string) The receiving transparent address\n    \"amount\" : x.xxx,                  (numeric) The total amount in ZEC received by the address\n    \"amountZat\" : xxxx                 (numeric) The amount in zatoshis\n    \"confirmations\" : n                (numeric) The number of confirmations of the most recent transaction included\n  }\n  ,...\n]\n\nBitcoin compatibility:\nCompatible up to five arguments, but can only use the default value for `addressFilter` and `includeImmatureCoinbase`.\nExamples:\n> zcash-cli listreceivedbyaddress \n> zcash-cli listreceivedbyaddress 6 true\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listreceivedbyaddress\", \"params\": [6, true, true] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"listsinceblock","args":"( \"blockhash\" target-confirmations includeWatchonly includeRemoved includeChange asOfHeight )","summary":"Get all transactions in blocks since block [blockhash], or all transactions if omitted","help":"listsinceblock ( \"blockhash\" target-confirmations includeWatchonly includeRemoved includeChange asOfHeight )\n\nGet all transactions in blocks since block [blockhash], or all transactions if omitted\n\nArguments:\n1. \"blockhash\"   (string, optional) The block hash to list transactions since\n2. target-confirmations:    (numeric, optional) The confirmations required, must be 1 or more\n3. includeWatchonly:        (bool, optional, default=false) Include transactions to watchonly addresses (see 'importaddress')4. includeRemoved           (bool, optional, default=true) Show transactions that were removed due to a reorg in the \"removed\" array (not guaranteed to work on pruned nodes)\n5. includeChange            (bool, optional, default=false) Also add entries for change outputs. Currently, only the default value is supported.\n6. asOfHeight       (numeric, optional, default=-1) Execute the query as if it\n                    were run when the blockchain was at the height specified by\n                    this argument. The default is to use the entire blockchain\n                    that the node is aware of. -1 can be used as in other RPC\n                    calls to indicate the current height (including the\n                    mempool), but this does not support negative values in\n                    general. A “future” height will fall back to the current\n                    height. Any explicit value will cause the mempool to be\n                    ignored, meaning no unconfirmed tx will be considered.\n\nResult:\n{\n  \"transactions\": [\n    \"address\":\"zcashaddress\",    (string) The Zcash address of the transaction. Not present for move transactions (category = move).\n    \"category\":\"send|receive\",     (string) The transaction category. 'send' has negative amounts, 'receive' has positive amounts.\n    \"status\" : \"mined|waiting|expiringsoon|expired\",    (string) The transaction status, can be 'mined', 'waiting', 'expiringsoon' \n                                                                    or 'expired'. Available for 'send' and 'receive' category of transactions.\n    \"amount\": x.xxx,          (numeric) The amount in ZEC. This is negative for the 'send' category, and for the 'move' category for moves \n                                          outbound. It is positive for the 'receive' category, and for the 'move' category for inbound funds.\n    \"amountZat\": x.xxx,       (numeric) The amount in zatoshis. Negative and positive are the same as for the 'amount' field.\n    \"vout\" : n,               (numeric) the vout value\n    \"fee\": x.xxx,             (numeric) The amount of the fee in ZEC. This is negative and only available for the 'send' category of transactions.\n    \"confirmations\": n,       (numeric) The number of confirmations for the transaction. Available for 'send' and 'receive' category of transactions.\n    \"blockhash\": \"hashvalue\",     (string) The block hash containing the transaction. Available for 'send' and 'receive' category of transactions.\n    \"blockindex\": n,          (numeric) The block index containing the transaction. Available for 'send' and 'receive' category of transactions.\n    \"blocktime\": xxx,         (numeric) The block time in seconds since epoch (1 Jan 1970 GMT).\n    \"txid\": \"transactionid\",  (string) The transaction id. Available for 'send' and 'receive' category of transactions.\n    \"time\": xxx,              (numeric) The transaction time in seconds since epoch (Jan 1 1970 GMT).\n    \"timereceived\": xxx,      (numeric) The time received in seconds since epoch (Jan 1 1970 GMT). Available for 'send' and 'receive' category of transactions.\n    \"comment\": \"...\",       (string) If a comment is associated with the transaction.\n    \"to\": \"...\",            (string) If a comment to is associated with the transaction.\n  ],\n  \"removed\": [...]            (array of objects, optional) structure is the same as \"transactions\" above, only present if includeRemoved=true\n                              Note: currently this only returns an empty array.\n  \"lastblock\": \"lastblockhash\"     (string) The hash of the last block\n}\n\nBitcoin compatibility:\nCompatible up to five arguments, but can only use the default value for `includeChange`, and only returns an empty array for \"removed\".\nExamples:\n> zcash-cli listsinceblock \n> zcash-cli listsinceblock \"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad\" 6\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listsinceblock\", \"params\": [\"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad\", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"listtransactions","args":"( \"dummy\" count from includeWatchonly asOfHeight)","summary":"Returns up to 'count' of the most recent transactions associated with legacy transparentaddresses of this wallet, skipping the first 'from' transactions.","help":"listtransactions ( \"dummy\" count from includeWatchonly asOfHeight)\n\nReturns up to 'count' of the most recent transactions associated with legacy transparent\naddresses of this wallet, skipping the first 'from' transactions.\n\nThis API does not provide any information about transactions containing shielded inputs\nor outputs, and should only be used in circumstances where it is necessary to interoperate\nwith legacy Bitcoin infrastructure. Use z_listreceivedbyaddress to obtain information about\nthe wallet's shielded transactions.\n\nArguments:\n1. (dummy)        (string, optional) If set, should be \"*\" for backwards compatibility.\n2. count          (numeric, optional, default=10) The number of transactions to return\n3. from           (numeric, optional, default=0) The number of transactions to skip\n4. includeWatchonly (bool, optional, default=false) Include transactions to watchonly addresses (see 'importaddress')\n5. asOfHeight       (numeric, optional, default=-1) Execute the query as if it\n                    were run when the blockchain was at the height specified by\n                    this argument. The default is to use the entire blockchain\n                    that the node is aware of. -1 can be used as in other RPC\n                    calls to indicate the current height (including the\n                    mempool), but this does not support negative values in\n                    general. A “future” height will fall back to the current\n                    height. Any explicit value will cause the mempool to be\n                    ignored, meaning no unconfirmed tx will be considered.\n\nResult:\n[\n  {\n    \"address\":\"zcashaddress\",    (string) The Zcash address of the transaction. Not present for \n                                                move transactions (category = move).\n    \"category\":\"send|receive\",   (string) The transaction category. 'send' and 'receive' transactions are \n                                              associated with an address, transaction id and block details\n    \"status\" : \"mined|waiting|expiringsoon|expired\",    (string) The transaction status, can be 'mined', 'waiting', 'expiringsoon' \n                                                                    or 'expired'. Available for 'send' and 'receive' category of transactions.\n    \"amount\": x.xxx,          (numeric) The amount in ZEC. This is negative for the 'send' category, and for the\n                                         'move' category for moves outbound. It is positive for the 'receive' category,\n                                         and for the 'move' category for inbound funds.\n    \"amountZat\": x.xxx,       (numeric) The amount in zatoshis. Negative and positive are the same as 'amount' field.\n    \"vout\" : n,               (numeric) the vout value\n    \"fee\": x.xxx,             (numeric) The amount of the fee in ZEC. This is negative and only available for the \n                                         'send' category of transactions.\n    \"confirmations\": n,       (numeric) The number of confirmations for the transaction. Available for 'send' and \n                                         'receive' category of transactions.\n    \"blockhash\": \"hashvalue\", (string) The block hash containing the transaction. Available for 'send' and 'receive'\n                                          category of transactions.\n    \"blockindex\": n,          (numeric) The block index containing the transaction. Available for 'send' and 'receive'\n                                          category of transactions.\n    \"txid\": \"transactionid\", (string) The transaction id. Available for 'send' and 'receive' category of transactions.\n    \"time\": xxx,              (numeric) The transaction time in seconds since epoch (midnight Jan 1 1970 GMT).\n    \"timereceived\": xxx,      (numeric) The time received in seconds since epoch (midnight Jan 1 1970 GMT). Available \n                                          for 'send' and 'receive' category of transactions.\n    \"comment\": \"...\",       (string) If a comment is associated with the transaction.\n    \"size\": n,                (numeric) Transaction size in bytes\n  }\n]\n\nExamples:\n\nList the most recent 10 transactions in the systems\n> zcash-cli listtransactions \n\nList transactions 100 to 120\n> zcash-cli listtransactions \"*\" 20 100\n\nAs a JSON RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listtransactions\", \"params\": [\"*\", 20, 100] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"listunspent","args":"( minconf maxconf [\"address\",...] includeUnsafe queryOptions asOfHeight )","summary":"Returns array of unspent transparent transaction outputs with between minconf andmaxconf (inclusive) confirmations. Use `z_listunspent` instead to see informationrelated to unspent shielded notes. Results may be optionally filtered to only includetxouts paid to specified addresses.","help":"listunspent ( minconf maxconf [\"address\",...] includeUnsafe queryOptions asOfHeight )\n\nReturns array of unspent transparent transaction outputs with between minconf and\nmaxconf (inclusive) confirmations. Use `z_listunspent` instead to see information\nrelated to unspent shielded notes. Results may be optionally filtered to only include\ntxouts paid to specified addresses.\n\nArguments:\n1. minconf          (numeric, optional, default=1) The minimum confirmations to filter\n2. maxconf          (numeric, optional, default=9999999) The maximum confirmations to filter\n3. \"addresses\"    (string) A json array of Zcash addresses to filter\n    [\n      \"address\"   (string) Zcash address\n      ,...\n    ]\n4. includeUnsafe    (bool, optional, default=true) Include outputs that are not safe to spend. Currently, only the default value is supported.\n5. queryOptions     (object, optional, default={}) JSON with query options. Currently, only the default value is supported.\n6. asOfHeight       (numeric, optional, default=-1) Execute the query as if it\n                    were run when the blockchain was at the height specified by\n                    this argument. The default is to use the entire blockchain\n                    that the node is aware of. -1 can be used as in other RPC\n                    calls to indicate the current height (including the\n                    mempool), but this does not support negative values in\n                    general. A “future” height will fall back to the current\n                    height. Any explicit value will cause the mempool to be\n                    ignored, meaning no unconfirmed tx will be considered.\n                    `minconf` must be at least 1 when `asOfHeight` is provided.\n\nResult\n[                   (array of json object)\n  {\n    \"txid\" : \"txid\",          (string) the transaction id \n    \"vout\" : n,               (numeric) the vout value\n    \"generated\" : true|false  (boolean) true if txout is a coinbase transaction output\n    \"address\" : \"address\",    (string) the Zcash address\n    \"scriptPubKey\" : \"key\",   (string) the script key\n    \"amount\" : x.xxx,         (numeric) the transaction amount in ZEC\n    \"amountZat\" : xxxx        (numeric) the transaction amount in zatoshis\n    \"confirmations\" : n,      (numeric) The number of confirmations\n    \"redeemScript\" : n        (string) The redeemScript if scriptPubKey is P2SH\n    \"spendable\" : xxx         (bool) Whether we have the private keys to spend this output\n  }\n  ,...\n]\n\nBitcoin compatibility:\nCompatible up to five arguments, but can only use the default value for `includeUnsafe` and `queryOptions`.\nExamples\n> zcash-cli listunspent \n> zcash-cli listunspent 6 9999999 \"[\\\"t1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\\\",\\\"t1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\\\"]\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listunspent\", \"params\": [6, 9999999 \"[\\\"t1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\\\",\\\"t1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\\\"]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"lockunspent","args":"unlock [{\"txid\":\"txid\",\"vout\":n},...]","summary":"Updates list of temporarily unspendable outputs.Temporarily lock (unlock=false) or unlock (unlock=true) specified transparent transaction outputs.A locked transaction output will not be chosen by automatic coin selection, when spending Zcash.Locks are stored in memory only. Nodes start with zero locked outputs, and the locked output listis always cleared (by virtue of process exit) when a node stops or fails.Also see the listunspent call","help":"lockunspent unlock [{\"txid\":\"txid\",\"vout\":n},...]\n\nUpdates list of temporarily unspendable outputs.\nTemporarily lock (unlock=false) or unlock (unlock=true) specified transparent transaction outputs.\nA locked transaction output will not be chosen by automatic coin selection, when spending Zcash.\nLocks are stored in memory only. Nodes start with zero locked outputs, and the locked output list\nis always cleared (by virtue of process exit) when a node stops or fails.\nAlso see the listunspent call\n\nArguments:\n1. unlock            (boolean, required) Whether to unlock (true) or lock (false) the specified transactions\n2. \"transactions\"  (string, required) A json array of objects. Each object the txid (string) vout (numeric)\n     [           (json array of json objects)\n       {\n         \"txid\":\"id\",    (string) The transaction id\n         \"vout\": n         (numeric) The output number\n       }\n       ,...\n     ]\n\nResult:\ntrue|false    (boolean) Whether the command was successful or not\n\nExamples:\n\nList the unspent transactions\n> zcash-cli listunspent \n\nLock an unspent transaction\n> zcash-cli lockunspent false \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\"\n\nList the locked transactions\n> zcash-cli listlockunspent \n\nUnlock the transaction again\n> zcash-cli lockunspent true \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\"\n\nAs a JSON RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"lockunspent\", \"params\": [false, \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"sendmany","args":"\"\" {\"address\":amount,...} ( minconf \"comment\" [\"address\",...] )","summary":"Send to multiple transparent recipients, using funds from the legacy transparentvalue pool. Amounts are decimal numbers with at most 8 digits of precision.Payments sent using this API are visible on-chain and do not otherwiseprovide privacy protections; it should only be used in circumstances where it is necessary to interoperate with legacy Bitcoin infrastructure.Prefer to use `z_sendmany` instead.","help":"sendmany \"\" {\"address\":amount,...} ( minconf \"comment\" [\"address\",...] )\n\nSend to multiple transparent recipients, using funds from the legacy transparent\nvalue pool. Amounts are decimal numbers with at most 8 digits of precision.\nPayments sent using this API are visible on-chain and do not otherwise\nprovide privacy protections; it should only be used in circumstances \nwhere it is necessary to interoperate with legacy Bitcoin infrastructure.\nPrefer to use `z_sendmany` instead.\n\n\nArguments:\n1. \"dummy\"               (string, required) Must be set to \"\" for backwards compatibility.\n2. \"amounts\"             (string, required) A json object with addresses and amounts\n    {\n      \"address\":amount   (numeric) The Zcash address is the key, the numeric amount in ZEC is the value\n      ,...\n    }\n3. minconf                 (numeric, optional, default=1) Only use the balance confirmed at least this many times.\n4. \"comment\"             (string, optional) A comment\n5. subtractfeefromamount   (string, optional) A json array with addresses.\n                           The fee will be equally deducted from the amount of each selected address.\n                           Those recipients will receive less Zcash than you enter in their corresponding amount field.\n                           If no addresses are specified here, the sender pays the fee.\n    [\n      \"address\"            (string) Subtract fee from this address\n      ,...\n    ]\n\nResult:\n\"transactionid\"          (string) The transaction id for the send. Only 1 transaction is created regardless of \n                                    the number of addresses.\n\nExamples:\n\nSend two amounts to two different addresses:\n> zcash-cli sendmany \"\" \"{\\\"t14oHp2v54vfmdgQ3v3SNuQga8JKHTNi2a1\\\":0.01,\\\"t1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\":0.02}\"\n\nSend two amounts to two different addresses setting the confirmation and comment:\n> zcash-cli sendmany \"\" \"{\\\"t14oHp2v54vfmdgQ3v3SNuQga8JKHTNi2a1\\\":0.01,\\\"t1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\":0.02}\" 6 \"testing\"\n\nSend two amounts to two different addresses, subtract fee from amount:\n> zcash-cli sendmany \"\" \"{\\\"t14oHp2v54vfmdgQ3v3SNuQga8JKHTNi2a1\\\":0.01,\\\"t1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\":0.02}\" 1 \"\" \"[\\\"t14oHp2v54vfmdgQ3v3SNuQga8JKHTNi2a1\\\",\\\"t1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\"]\"\n\nAs a JSON RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendmany\", \"params\": [\"\", \"{\\\"t14oHp2v54vfmdgQ3v3SNuQga8JKHTNi2a1\\\":0.01,\\\"t1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\":0.02}\", 6, \"testing\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"sendtoaddress","args":"\"zcashaddress\" amount ( \"comment\" \"comment-to\" subtractfeefromamount )","summary":"Send an amount to a given transparent address. The amount is interpreted as a real numberand is rounded to the nearest 0.00000001. This API will only select funds from the transparentpool, and all the details of the transaction, including sender, recipient, and amount will bepermanently visible on the public chain. THIS API PROVIDES NO PRIVACY, and should only beused when interoperability with legacy Bitcoin infrastructure is required.","help":"sendtoaddress \"zcashaddress\" amount ( \"comment\" \"comment-to\" subtractfeefromamount )\n\nSend an amount to a given transparent address. The amount is interpreted as a real number\nand is rounded to the nearest 0.00000001. This API will only select funds from the transparent\npool, and all the details of the transaction, including sender, recipient, and amount will be\npermanently visible on the public chain. THIS API PROVIDES NO PRIVACY, and should only be\nused when interoperability with legacy Bitcoin infrastructure is required.\n\nArguments:\n1. \"zcashaddress\"  (string, required) The transparent Zcash address to send to.\n2. \"amount\"      (numeric, required) The amount in ZEC to send. eg 0.1\n3. \"comment\"     (string, optional) A comment used to store what the transaction is for. \n                             This is not part of the transaction, just kept in your wallet.\n4. \"comment-to\"  (string, optional) A comment to store the name of the person or organization \n                             to which you're sending the transaction. This is not part of the \n                             transaction, just kept in your wallet.\n5. subtractfeefromamount  (boolean, optional, default=false) The fee will be deducted from the amount being sent.\n                             The recipient will receive less Zcash than you enter in the amount field.\n\nResult:\n\"transactionid\"  (string) The transaction id.\n\nExamples:\n> zcash-cli sendtoaddress \"t1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 0.1\n> zcash-cli sendtoaddress \"t1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 0.1 \"donation\" \"seans outpost\"\n> zcash-cli sendtoaddress \"t1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 0.1 \"\" \"\" true\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendtoaddress\", \"params\": [\"t1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\", 0.1, \"donation\", \"seans outpost\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"settxfee","args":"amount","summary":"Set the transaction fee per kB. Overwrites the paytxfee parameter.","help":"settxfee amount\n\nSet the transaction fee per kB. Overwrites the paytxfee parameter.\n\nArguments:\n1. amount         (numeric, required) The transaction fee in ZEC/kB rounded to the nearest 0.00000001\n\nResult\ntrue|false        (boolean) Returns true if successful\n\nExamples:\n> zcash-cli settxfee 0.00001\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"settxfee\", \"params\": [0.00001] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"signmessage","args":"\"t-addr\" \"message\"","summary":"Sign a message with the private key of a t-addr","help":"signmessage \"t-addr\" \"message\"\n\nSign a message with the private key of a t-addr\n\nArguments:\n1. \"t-addr\"  (string, required) The transparent address to use to look up the private key.\n   that will be used to sign the message.\n2. \"message\" (string, required) The message to create a signature of.\n\nResult:\n\"signature\"  (string) The signature of the message encoded in base 64\n\nExamples:\n\nUnlock the wallet for 30 seconds\n> zcash-cli walletpassphrase \"mypassphrase\" 30\n\nCreate the signature\n> zcash-cli signmessage \"t14oHp2v54vfmdgQ3v3SNuQga8JKHTNi2a1\" \"my message\"\n\nVerify the signature\n> zcash-cli verifymessage \"t14oHp2v54vfmdgQ3v3SNuQga8JKHTNi2a1\" \"signature\" \"my message\"\n\nAs json rpc\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signmessage\", \"params\": [\"t14oHp2v54vfmdgQ3v3SNuQga8JKHTNi2a1\", \"my message\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"walletconfirmbackup","args":"\"emergency recovery phrase\"","summary":"CAUTION: This is an internal method that is not intended to be called directly byusers. Please use the zcashd-wallet-tool utility (built or installed in the same directoryas zcashd) instead. In particular, this method should not be used from zcash-cli, in orderto avoid exposing the recovery phrase on the command line.","help":"walletconfirmbackup \"emergency recovery phrase\"\n\nCAUTION: This is an internal method that is not intended to be called directly by\nusers. Please use the zcashd-wallet-tool utility (built or installed in the same directory\nas zcashd) instead. In particular, this method should not be used from zcash-cli, in order\nto avoid exposing the recovery phrase on the command line.\n\nNotify the wallet that the user has backed up the emergency recovery phrase,\nwhich can be obtained by making a call to z_exportwallet. The zcashd embedded wallet\nrequires confirmation that the emergency recovery phrase has been backed up before it\nwill permit new spending keys or addresses to be generated.\n\nArguments:\n1. \"emergency recovery phrase\" (string, required) The full recovery phrase returned as part\n   of the data returned by z_exportwallet. An error will be returned if the value provided\n   does not match the wallet's existing emergency recovery phrase.\n\nExamples:\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"walletconfirmbackup\", \"params\": [\"abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon art\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"z_exportkey","args":"\"zaddr\"","summary":"Reveals the zkey corresponding to 'zaddr'.Then the z_importkey can be used with this output","help":"z_exportkey \"zaddr\"\n\nReveals the zkey corresponding to 'zaddr'.\nThen the z_importkey can be used with this output\n\nArguments:\n1. \"zaddr\"   (string, required) The zaddr for the private key\n\nResult:\n\"key\"                  (string) The private key\n\nExamples:\n> zcash-cli z_exportkey \"myaddress\"\n> zcash-cli z_importkey \"mykey\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_exportkey\", \"params\": [\"myaddress\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"z_exportviewingkey","args":"\"zaddr\"","summary":"Returns the full viewing key corresponding to 'zaddr' in the format specified byhttps://zips.z.cash/protocol/protocol.pdf#addressandkeyencoding.z_importviewingkey can be used to import Sprout and Sapling exported in this format;import of unified viewing keys is not yet supported.","help":"z_exportviewingkey \"zaddr\"\n\nReturns the full viewing key corresponding to 'zaddr' in the format specified by\nhttps://zips.z.cash/protocol/protocol.pdf#addressandkeyencoding.\nz_importviewingkey can be used to import Sprout and Sapling exported in this format;\nimport of unified viewing keys is not yet supported.\n\nArguments:\n1. \"zaddr\"   (string, required) The zaddr for the viewing key\n\nResult:\n\"vkey\"                  (string) The viewing key\n\nExamples:\n> zcash-cli z_exportviewingkey \"myaddress\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_exportviewingkey\", \"params\": [\"myaddress\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"z_exportwallet","args":"\"filename\"","summary":"Exports all wallet keys, for taddr and zaddr, in a human-readable format.  Overwriting an existing file is not permitted.","help":"z_exportwallet \"filename\"\n\nExports all wallet keys, for taddr and zaddr, in a human-readable format.  Overwriting an existing file is not permitted.\n\nArguments:\n1. \"filename\"    (string, required) The filename, saved in folder set by zcashd -exportdir option\n\nResult:\n\"path\"           (string) The full path of the destination file\n\nExamples:\n> zcash-cli z_exportwallet \"test\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_exportwallet\", \"params\": [\"test\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"z_getaddressforaccount","args":"account ( [\"receiver_type\", ...] diversifier_index )","summary":"For the given account number, derives a Unified Address in accordancewith the remaining arguments:","help":"z_getaddressforaccount account ( [\"receiver_type\", ...] diversifier_index )\n\nFor the given account number, derives a Unified Address in accordance\nwith the remaining arguments:\n\n- If no list of receiver types is given (or the empty list \"[]\"), the best\n  and second-best shielded receiver types, along with the \"p2pkh\" (i.e. transparent) receiver\n  type, will be used.\n- If no diversifier index is given, the next unused index (that is valid\n  for the list of receiver types) will be selected.\n\nThe account number must have been previously generated by a call to the\nz_getnewaccount RPC method.\n\nOnce a Unified Address has been derived at a specific diversifier index,\nre-deriving it (via a subsequent call to z_getaddressforaccount with the\nsame account and index) will produce the same address with the same list\nof receiver types. An error will be returned if a different list of receiver\ntypes is requested.\n\nResult:\n{\n  \"account\": n,                          (numeric) the specified account number\n  \"diversifier_index\": n,                (numeric) the index specified or chosen\n  \"receiver_types\": [\"orchard\",...]\",   (json array of string) the receiver types that the UA contains (valid values are \"p2pkh\", \"sapling\", \"orchard\")\n  \"address\"                              (string) The corresponding address\n}\n\nExamples:\n> zcash-cli z_getaddressforaccount 4\n> zcash-cli z_getaddressforaccount 4 '[]' 1\n> zcash-cli z_getaddressforaccount 4 '[\"p2pkh\",\"sapling\",\"orchard\"]' 1\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_getaddressforaccount\", \"params\": [4] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"z_getbalance","args":"\"address\" ( minconf inZat )","summary":"DEPRECATED; please use z_getbalanceforaccount, z_getbalanceforviewingkey,or getbalance (for legacy transparent balance) instead.","help":"z_getbalance \"address\" ( minconf inZat )\n\nDEPRECATED; please use z_getbalanceforaccount, z_getbalanceforviewingkey,\nor getbalance (for legacy transparent balance) instead.\n\nReturns the balance of a taddr or zaddr belonging to the node's wallet.\n\nCAUTION: If the wallet has only an incoming viewing key for this address, then spends cannot be\ndetected, and so the returned balance may be larger than the actual balance.\nArguments:\n1. \"address\"        (string) The selected address. It may be a transparent or shielded address.\n2. minconf          (numeric, optional, default=1) Only include transactions confirmed at least this many times.\n3. inZat            (bool, optional, default=false) Get the result amount in zatoshis (as an integer).\n\nResult:\namount              (numeric) The total amount in ZEC(or zatoshis if inZat is true) received at this address.\n\nExamples:\n\nThe total amount received by address \"myaddress\"\n> zcash-cli z_getbalance \"myaddress\"\n\nThe total amount received by address \"myaddress\" at least 5 blocks confirmed\n> zcash-cli z_getbalance \"myaddress\" 5\n\nAs a JSON RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_getbalance\", \"params\": [\"myaddress\", 5] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":true},{"name":"z_getbalanceforaccount","args":"account ( minconf asOfHeight )","summary":"Returns the account's spendable balance for each value pool (\"transparent\", \"sapling\", and \"orchard\").Arguments:1. account      (numeric) The account number.2. minconf      (numeric, optional, default=1) Only include transactions confirmed at least this many times.3. asOfHeight       (numeric, optional, default=-1) Execute the query as if it                    were run when the blockchain was at the height specified by                    this argument. The default is to use the entire blockchain                    that the node is aware of. -1 can be used as in other RPC                    calls to indicate the current height (including the                    mempool), but this does not support negative values in                    general. A “future” height will fall back to the current                    height. Any explicit value will cause the mempool to be                    ignored, meaning no unconfirmed tx will be considered.                    `minconf` must be at least 1 when `asOfHeight` is provided.","help":"z_getbalanceforaccount account ( minconf asOfHeight )\n\nReturns the account's spendable balance for each value pool (\"transparent\", \"sapling\", and \"orchard\").\nArguments:\n1. account      (numeric) The account number.\n2. minconf      (numeric, optional, default=1) Only include transactions confirmed at least this many times.\n3. asOfHeight       (numeric, optional, default=-1) Execute the query as if it\n                    were run when the blockchain was at the height specified by\n                    this argument. The default is to use the entire blockchain\n                    that the node is aware of. -1 can be used as in other RPC\n                    calls to indicate the current height (including the\n                    mempool), but this does not support negative values in\n                    general. A “future” height will fall back to the current\n                    height. Any explicit value will cause the mempool to be\n                    ignored, meaning no unconfirmed tx will be considered.\n                    `minconf` must be at least 1 when `asOfHeight` is provided.\n\nResult:\n{\n  \"pools\": {\n    \"transparent\": {\n        \"valueZat\": amount   (numeric) The amount held by this account in the transparent value pool\n    \"},\n    \"sapling\": {\n        \"valueZat\": amount   (numeric) The amount held by this account in the Sapling value pool\n    \"},\n    \"orchard\": {\n        \"valueZat\": amount   (numeric) The amount held by this account in the Orchard value pool\n    \"}\n  \"},\n  \"minimum_confirmations\": n (numeric) The given minconf argument\n}\nResult amounts are in units of zatoshis.\nPools for which the balance is zero are not shown.\n\nExamples:\n\nThe per-pool amount received by account 4 with at least 1 block confirmed\n> zcash-cli z_getbalanceforaccount 4\n\nThe per-pool amount received by account 4 with at least 5 block confirmations\n> zcash-cli z_getbalanceforaccount 4 5\n\nAs a JSON RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_getbalanceforaccount\", \"params\": [4 5] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"z_getbalanceforviewingkey","args":"\"fvk\" ( minconf asOfHeight )","summary":"Returns the balance viewable by a full viewing key known to the node's walletfor each value pool. Sprout viewing keys may be used only if the wallet controlsthe corresponding spending key.Arguments:1. \"fvk\"        (string) The selected full viewing key.2. minconf      (numeric, optional, default=1) Only include transactions confirmed at least this many times.3. asOfHeight       (numeric, optional, default=-1) Execute the query as if it                    were run when the blockchain was at the height specified by                    this argument. The default is to use the entire blockchain                    that the node is aware of. -1 can be used as in other RPC                    calls to indicate the current height (including the                    mempool), but this does not support negative values in                    general. A “future” height will fall back to the current                    height. Any explicit value will cause the mempool to be                    ignored, meaning no unconfirmed tx will be considered.                    `minconf` must be at least 1 when `asOfHeight` is provided.","help":"z_getbalanceforviewingkey \"fvk\" ( minconf asOfHeight )\n\nReturns the balance viewable by a full viewing key known to the node's wallet\nfor each value pool. Sprout viewing keys may be used only if the wallet controls\nthe corresponding spending key.\nArguments:\n1. \"fvk\"        (string) The selected full viewing key.\n2. minconf      (numeric, optional, default=1) Only include transactions confirmed at least this many times.\n3. asOfHeight       (numeric, optional, default=-1) Execute the query as if it\n                    were run when the blockchain was at the height specified by\n                    this argument. The default is to use the entire blockchain\n                    that the node is aware of. -1 can be used as in other RPC\n                    calls to indicate the current height (including the\n                    mempool), but this does not support negative values in\n                    general. A “future” height will fall back to the current\n                    height. Any explicit value will cause the mempool to be\n                    ignored, meaning no unconfirmed tx will be considered.\n                    `minconf` must be at least 1 when `asOfHeight` is provided.\n\nResult:\n{\n  \"pools\": {\n    \"transparent\": {\n        \"valueZat\": amount   (numeric) The amount viewable by this FVK held in the transparent value pool\n    \"},\n    \"sprout\": {\n        \"valueZat\": amount   (numeric) The amount viewable by this FVK held in the Sprout value pool\n    \"},\n    \"sapling\": {\n        \"valueZat\": amount   (numeric) The amount viewable by this FVK held in the Sapling value pool\n    \"},\n    \"orchard\": {\n        \"valueZat\": amount   (numeric) The amount viewable by this FVK held in the Orchard value pool\n    \"}\n  \"},\n  \"minimum_confirmations\": n (numeric) The given minconf argument\n}\nResult amounts are in units of zatoshis.\nPools for which the balance is zero are not shown.\n\nExamples:\n\nThe per-pool amount viewable by key \"myfvk\" with at least 1 block confirmed\n> zcash-cli z_getbalanceforviewingkey \"myfvk\"\n\nThe per-pool amount viewable by key \"myfvk\" with at least 5 blocks confirmed\n> zcash-cli z_getbalanceforviewingkey \"myfvk\" 5\n\nAs a JSON RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_getbalanceforviewingkey\", \"params\": [\"myfvk\", 5] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"z_getmigrationstatus","args":"( asOfHeight )","summary":"Arguments:1. asOfHeight       (numeric, optional, default=-1) Execute the query as if it                    were run when the blockchain was at the height specified by                    this argument. The default is to use the entire blockchain                    that the node is aware of. -1 can be used as in other RPC                    calls to indicate the current height (including the                    mempool), but this does not support negative values in                    general. A “future” height will fall back to the current                    height. Any explicit value will cause the mempool to be                    ignored, meaning no unconfirmed tx will be considered.","help":"z_getmigrationstatus ( asOfHeight )\nReturns information about the status of the Sprout to Sapling migration.\nNote: A transaction is defined as finalized if it has at least ten confirmations.\nAlso, it is possible that manually created transactions involving this wallet\nwill be included in the result.\n\nArguments:\n1. asOfHeight       (numeric, optional, default=-1) Execute the query as if it\n                    were run when the blockchain was at the height specified by\n                    this argument. The default is to use the entire blockchain\n                    that the node is aware of. -1 can be used as in other RPC\n                    calls to indicate the current height (including the\n                    mempool), but this does not support negative values in\n                    general. A “future” height will fall back to the current\n                    height. Any explicit value will cause the mempool to be\n                    ignored, meaning no unconfirmed tx will be considered.\n\nResult:\n{\n  \"enabled\": true|false,                    (boolean) Whether or not migration is enabled\n  \"destination_address\": \"zaddr\",           (string) The Sapling address that will receive Sprout funds\n  \"unmigrated_amount\": nnn.n,               (numeric) The total amount of unmigrated ZEC \n  \"unfinalized_migrated_amount\": nnn.n,     (numeric) The total amount of unfinalized ZEC \n  \"finalized_migrated_amount\": nnn.n,       (numeric) The total amount of finalized ZEC \n  \"finalized_migration_transactions\": nnn,  (numeric) The number of migration transactions involving this wallet\n  \"time_started\": ttt,                      (numeric, optional) The block time of the first migration transaction as a Unix timestamp\n  \"migration_txids\": [txids]                (json array of strings) An array of all migration txids involving this wallet\n}\n\n","deprecated":false},{"name":"z_getnewaccount","args":"","summary":"Prepares and returns a new account.","help":"z_getnewaccount\n\nPrepares and returns a new account.\n\nAccounts are numbered starting from zero; this RPC method selects the next\navailable sequential account number within the UA-compatible HD seed phrase.\n\nEach new account is a separate group of funds within the wallet, and adds an\nadditional performance cost to wallet scanning.\n\nUse the z_getaddressforaccount RPC method to obtain addresses for an account.\n\nResult:\n{\n  \"account\": n,       (numeric) the new account number\n}\n\nExamples:\n> zcash-cli z_getnewaccount \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_getnewaccount\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"z_getnewaddress","args":"is DEPRECATED and will be removed in a future release","summary":"Use z_getnewaccount and z_getaddressforaccount instead, or restart with `-allowdeprecated=z_getnewaddress` if you require backward compatibility.See https://zcash.github.io/zcash/user/deprecation.html for more information.","help":"z_getnewaddress is DEPRECATED and will be removed in a future release\n\nUse z_getnewaccount and z_getaddressforaccount instead, or restart \nwith `-allowdeprecated=z_getnewaddress` if you require backward compatibility.\nSee https://zcash.github.io/zcash/user/deprecation.html for more information.\n","deprecated":true},{"name":"z_getnotescount","args":"( minconf asOfHeight )","summary":"Returns the number of notes available in the wallet for each shielded value pool.","help":"z_getnotescount ( minconf asOfHeight )\n\nReturns the number of notes available in the wallet for each shielded value pool.\n\nArguments:\n1. minconf      (numeric, optional, default=1) Only include notes in transactions confirmed at least this many times.\n2. asOfHeight       (numeric, optional, default=-1) Execute the query as if it\n                    were run when the blockchain was at the height specified by\n                    this argument. The default is to use the entire blockchain\n                    that the node is aware of. -1 can be used as in other RPC\n                    calls to indicate the current height (including the\n                    mempool), but this does not support negative values in\n                    general. A “future” height will fall back to the current\n                    height. Any explicit value will cause the mempool to be\n                    ignored, meaning no unconfirmed tx will be considered.\n                    `minconf` must be at least 1 when `asOfHeight` is provided.\n\nResult:\n{\n  \"sprout\"      (numeric) the number of Sprout notes in the wallet\n  \"sapling\"     (numeric) the number of Sapling notes in the wallet\n  \"orchard\"     (numeric) the number of Orchard notes in the wallet\n}\n\nExamples:\n> zcash-cli z_getnotescount 0\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_getnotescount\", \"params\": [0] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"z_getoperationresult","args":"([\"operationid\", ... ]) ","summary":"Retrieve the result and status of an operation which has finished, and then remove the operation from memory.","help":"z_getoperationresult ([\"operationid\", ... ]) \n\nRetrieve the result and status of an operation which has finished, and then remove the operation from memory.\n\nArguments:\n1. \"operationid\"         (array, optional) A list of operation ids we are interested in.  If not provided, examine all operations known to the node.\n\nResult:\n\"    [object, ...]\"      (array) A list of JSON objects\n\nExamples:\n> zcash-cli z_getoperationresult '[\"operationid\", ... ]'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_getoperationresult\", \"params\": ['[\"operationid\", ... ]'] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"z_getoperationstatus","args":"([\"operationid\", ... ]) ","summary":"Get operation status and any associated result or error data.  The operation will remain in memory.","help":"z_getoperationstatus ([\"operationid\", ... ]) \n\nGet operation status and any associated result or error data.  The operation will remain in memory.\n\nArguments:\n1. \"operationid\"         (array, optional) A list of operation ids we are interested in.  If not provided, examine all operations known to the node.\n\nResult:\n\"    [object, ...]\"      (array) A list of JSON objects\n\nExamples:\n> zcash-cli z_getoperationstatus '[\"operationid\", ... ]'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_getoperationstatus\", \"params\": ['[\"operationid\", ... ]'] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"z_gettotalbalance","args":"( minconf includeWatchonly )","summary":"DEPRECATED. Please use z_getbalanceforaccount or getbalance (for legacy transparent balance) instead.","help":"z_gettotalbalance ( minconf includeWatchonly )\n\nDEPRECATED. Please use z_getbalanceforaccount or getbalance (for legacy transparent balance) instead.\n\nReturn the total value of funds stored in the node's wallet.\n\nCAUTION: If the wallet contains any addresses for which it only has incoming viewing keys,\nthe returned private balance may be larger than the actual balance, because spends cannot\nbe detected with incoming viewing keys.\n\nArguments:\n1. minconf          (numeric, optional, default=1) Only include private and transparent transactions confirmed at least this many times.\n2. includeWatchonly (bool, optional, default=false) Also include balance in watchonly addresses (see 'importaddress' and 'z_importviewingkey')\n\nResult:\n{\n  \"transparent\": xxxxx,     (numeric) the total balance of transparent funds\n  \"private\": xxxxx,         (numeric) the total balance of shielded funds (in all shielded addresses)\n  \"total\": xxxxx,           (numeric) the total balance of both transparent and shielded funds\n}\n\nExamples:\n\nThe total amount in the wallet\n> zcash-cli z_gettotalbalance \n\nThe total amount in the wallet at least 5 blocks confirmed\n> zcash-cli z_gettotalbalance 5\n\nAs a JSON RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_gettotalbalance\", \"params\": [5] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":true},{"name":"z_importkey","args":"\"zkey\" ( rescan startHeight )","summary":"Adds a zkey (as returned by z_exportkey) to your wallet.Import of Orchard keys is not supported.","help":"z_importkey \"zkey\" ( rescan startHeight )\n\nAdds a zkey (as returned by z_exportkey) to your wallet.\nImport of Orchard keys is not supported.\n\nArguments:\n1. \"zkey\"             (string, required) The zkey (see z_exportkey)\n2. rescan             (string, optional, default=\"whenkeyisnew\") Rescan the wallet for transactions - can be \"yes\", \"no\" or \"whenkeyisnew\"\n3. startHeight        (numeric, optional, default=0) Block height to start rescan from\n\nNote: This call can take a long time to complete if rescan is true.\n\nResult:\n{\n  \"address_type\" : \"xxxx\",                 (string) \"sprout\" or \"sapling\"\n  \"type\" : \"xxxx\",                         (string) \"sprout\" or \"sapling\" (DEPRECATED, legacy attribute)\n  \"address\" : \"address|DefaultAddress\",    (string) The address corresponding to the spending key (for Sapling, this is the default address).\n}\n\nExamples:\n\nExport a zkey\n> zcash-cli z_exportkey \"myaddress\"\n\nImport the zkey with rescan\n> zcash-cli z_importkey \"mykey\"\n\nImport the zkey with partial rescan\n> zcash-cli z_importkey \"mykey\" whenkeyisnew 30000\n\nRe-import the zkey with longer partial rescan\n> zcash-cli z_importkey \"mykey\" yes 20000\n\nAs a JSON-RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_importkey\", \"params\": [\"mykey\", \"no\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"z_importviewingkey","args":"\"vkey\" ( rescan startHeight )","summary":"Adds a viewing key (as returned by z_exportviewingkey) to your wallet.","help":"z_importviewingkey \"vkey\" ( rescan startHeight )\n\nAdds a viewing key (as returned by z_exportviewingkey) to your wallet.\n\nArguments:\n1. \"vkey\"             (string, required) The viewing key (see z_exportviewingkey)\n2. rescan             (string, optional, default=\"whenkeyisnew\") Rescan the wallet for transactions - can be \"yes\", \"no\" or \"whenkeyisnew\"\n3. startHeight        (numeric, optional, default=0) Block height to start rescan from\n\nNote: This call can take a long time to complete if rescan is true. Import of Unified viewing keys is not yet supported.\n\nResult:\n{\n  \"address_type\" : \"xxxx\",                 (string) \"sprout\" or \"sapling\"\n  \"type\" : \"xxxx\",                         (string) \"sprout\" or \"sapling\" (DEPRECATED, legacy attribute)\n  \"address\" : \"address|DefaultAddress\",    (string) The address corresponding to the viewing key (for Sapling, this is the default address).\n}\n\nExamples:\n\nImport a viewing key\n> zcash-cli z_importviewingkey \"vkey\"\n\nImport the viewing key without rescan\n> zcash-cli z_importviewingkey \"vkey\", no\n\nImport the viewing key with partial rescan\n> zcash-cli z_importviewingkey \"vkey\" whenkeyisnew 30000\n\nRe-import the viewing key with longer partial rescan\n> zcash-cli z_importviewingkey \"vkey\" yes 20000\n\nAs a JSON-RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_importviewingkey\", \"params\": [\"vkey\", \"no\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"z_importwallet","args":"\"filename\"","summary":"Imports taddr and zaddr keys from a wallet export file (see z_exportwallet).","help":"z_importwallet \"filename\"\n\nImports taddr and zaddr keys from a wallet export file (see z_exportwallet).\n\nArguments:\n1. \"filename\"    (string, required) The wallet file\n\nExamples:\n\nDump the wallet\n> zcash-cli z_exportwallet \"nameofbackup\"\n\nImport the wallet\n> zcash-cli z_importwallet \"path/to/exportdir/nameofbackup\"\n\nImport using the json rpc call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_importwallet\", \"params\": [\"path/to/exportdir/nameofbackup\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"z_listaccounts","args":"","summary":"Returns the list of accounts created with z_getnewaccount.","help":"z_listaccounts\n\nReturns the list of accounts created with z_getnewaccount.\n\nResult:\n[\n   {\n     \"account\": \"uint\",           (uint) The account id\n     \"addresses\": [\n        {\n           \"diversifier\":  \"uint\",        (string) A diversifier used in the account\n           \"ua\":  \"address\",              (string) The unified address corresponding to the diversifier.\n        }\n     ]\n   }\n]\n\nExamples:\n> zcash-cli z_listaccounts \n\n","deprecated":false},{"name":"z_listaddresses","args":"is DEPRECATED and will be removed in a future release","summary":"Use listaddresses or restart with `-allowdeprecated=z_listaddresses`if you require backward compatibility.See https://zcash.github.io/zcash/user/deprecation.html for more information.","help":"z_listaddresses is DEPRECATED and will be removed in a future release\n\nUse listaddresses or restart with `-allowdeprecated=z_listaddresses`\nif you require backward compatibility.\nSee https://zcash.github.io/zcash/user/deprecation.html for more information.\n","deprecated":true},{"name":"z_listoperationids","args":"","summary":"Returns the list of operation ids currently known to the wallet.","help":"z_listoperationids\n\nReturns the list of operation ids currently known to the wallet.\n\nArguments:\n1. \"status\"         (string, optional) Filter result by the operation's state e.g. \"success\".\n\nResult:\n[                     (json array of string)\n  \"operationid\"       (string) an operation id belonging to the wallet\n  ,...\n]\n\nExamples:\n> zcash-cli z_listoperationids \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_listoperationids\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"z_listreceivedbyaddress","args":"\"address\" ( minconf asOfHeight )","summary":"Return a list of amounts received by a zaddr belonging to the node's wallet.","help":"z_listreceivedbyaddress \"address\" ( minconf asOfHeight )\n\nReturn a list of amounts received by a zaddr belonging to the node's wallet.\n\nArguments:\n1. \"address\"      (string) The shielded address.\n2. minconf        (numeric, optional, default=1) Only include transactions confirmed at least this many times.\n3. asOfHeight       (numeric, optional, default=-1) Execute the query as if it\n                    were run when the blockchain was at the height specified by\n                    this argument. The default is to use the entire blockchain\n                    that the node is aware of. -1 can be used as in other RPC\n                    calls to indicate the current height (including the\n                    mempool), but this does not support negative values in\n                    general. A “future” height will fall back to the current\n                    height. Any explicit value will cause the mempool to be\n                    ignored, meaning no unconfirmed tx will be considered.\n                    `minconf` must be at least 1 when `asOfHeight` is provided.\n\nResult (output indices for only one value pool will be present):\n[\n  {\n    \"pool\": \"pool\"                (string) one of (\"transparent\", \"sprout\", \"sapling\", \"orchard\")\n    \"txid\": \"txid\",               (string) the transaction id\n    \"amount\": xxxxx,              (numeric) the amount of value in the note\n    \"amountZat\" : xxxx            (numeric) The amount in zatoshis\n    \"memo\": xxxxx,                (string) hexadecimal string representation of memo field\n    \"confirmations\" : n,          (numeric) the number of confirmations\n    \"blockheight\": n,             (numeric) The block height containing the transaction\n    \"blockindex\": n,              (numeric) The block index containing the transaction.\n    \"blocktime\": xxx,             (numeric) The transaction time in seconds since epoch (midnight Jan 1 1970 GMT).\n    \"jsindex\" (sprout) : n,       (numeric) the joinsplit index\n    \"jsoutindex\" (sprout) : n,    (numeric) the output index of the joinsplit\n    \"outindex\" (sapling, orchard) : n, (numeric) the Sapling output index, or the Orchard action index\n    \"change\": true|false,         (boolean) true if the output was received to a change address\n  },\n...\n]\n\nExamples:\n> zcash-cli z_listreceivedbyaddress \"ztfaW34Gj9FrnGUEf833ywDVL62NWXBM81u6EQnM6VR45eYnXhwztecW1SjxA7JrmAXKJhxhj3vDNEpVCQoSvVoSpmbhtjf\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_listreceivedbyaddress\", \"params\": [\"ztfaW34Gj9FrnGUEf833ywDVL62NWXBM81u6EQnM6VR45eYnXhwztecW1SjxA7JrmAXKJhxhj3vDNEpVCQoSvVoSpmbhtjf\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"z_listunifiedreceivers","args":"unified_address","summary":"Returns a record of the individual receivers contained within the provided UA,keyed by receiver type. The UA may not have receivers for some receiver types,in which case those keys will be absent.","help":"z_listunifiedreceivers unified_address\n\nReturns a record of the individual receivers contained within the provided UA,\nkeyed by receiver type. The UA may not have receivers for some receiver types,\nin which case those keys will be absent.\n\nTransactions that send funds to any of the receivers returned by this RPC\nmethod will be detected by the wallet as having been sent to the unified\naddress.\n\nArguments:\n1. unified_address (string) The unified address\n\nResult:\n{\n  \"TRANSPARENT_TYPE\": \"address\", (string) The legacy transparent address (\"p2pkh\" or \"p2sh\", never both)\n  \"sapling\": \"address\",          (string) The legacy Sapling address\n  \"orchard\": \"address\"           (string) A single-receiver Unified Address containing the Orchard receiver\n}\n\nExamples:\n> zcash-cli z_listunifiedreceivers \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_listunifiedreceivers\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"z_listunspent","args":"( minconf maxconf includeWatchonly [\"zaddr\",...] asOfHeight )","summary":"Returns an array of unspent shielded notes with between minconf and maxconf (inclusive)confirmations. Results may be optionally filtered to only include notes sent to specifiedaddresses.When minconf is 0, unspent notes with zero confirmations are returned, even though they arenot immediately spendable.","help":"z_listunspent ( minconf maxconf includeWatchonly [\"zaddr\",...] asOfHeight )\n\nReturns an array of unspent shielded notes with between minconf and maxconf (inclusive)\nconfirmations. Results may be optionally filtered to only include notes sent to specified\naddresses.\nWhen minconf is 0, unspent notes with zero confirmations are returned, even though they are\nnot immediately spendable.\n\nArguments:\n1. minconf          (numeric, optional, default=1) The minimum confirmations to filter\n2. maxconf          (numeric, optional, default=9999999) The maximum confirmations to filter\n3. includeWatchonly (bool, optional, default=false) Also include watchonly addresses (see 'z_importviewingkey')\n4. \"addresses\"      (string) A json array of shielded addresses to filter on.  Duplicate addresses not allowed.\n    [\n      \"address\"     (string) Sprout, Sapling, or Unified address\n      ,...\n    ]\n5. asOfHeight       (numeric, optional, default=-1) Execute the query as if it\n                    were run when the blockchain was at the height specified by\n                    this argument. The default is to use the entire blockchain\n                    that the node is aware of. -1 can be used as in other RPC\n                    calls to indicate the current height (including the\n                    mempool), but this does not support negative values in\n                    general. A “future” height will fall back to the current\n                    height. Any explicit value will cause the mempool to be\n                    ignored, meaning no unconfirmed tx will be considered.\n                    `minconf` must be at least 1 when `asOfHeight` is provided.\n\nResult (output indices for only one value pool will be present):\n[                             (array of json object)\n  {\n    \"txid\" : \"txid\",                   (string) the transaction id \n    \"pool\" : \"sprout|sapling|orchard\",   (string) The shielded value pool\n    \"jsindex\" (sprout) : n,            (numeric) the joinsplit index\n    \"jsoutindex\" (sprout) : n,         (numeric) the output index of the joinsplit\n    \"outindex\" (sapling, orchard) : n, (numeric) the Sapling output or Orchard action index\n    \"confirmations\" : n,               (numeric) the number of confirmations\n    \"spendable\" : true|false,          (boolean) true if note can be spent by wallet, false if address is watchonly\n    \"account\" : n,                     (numeric, optional) the unified account ID, if applicable\n    \"address\" : \"address\",             (string, optional) the shielded address, omitted if this note was sent to an internal receiver\n    \"amount\": xxxxx,                   (numeric) the amount of value in the note\n    \"memo\": xxxxx,                     (string) hexadecimal string representation of memo field\n    \"change\": true|false,              (boolean) true if the address that received the note is also one of the sending addresses\n  }\n  ,...\n]\n\nExamples\n> zcash-cli z_listunspent \n> zcash-cli z_listunspent 6 9999999 false \"[\\\"ztbx5DLDxa5ZLFTchHhoPNkKs57QzSyib6UqXpEdy76T1aUdFxJt1w9318Z8DJ73XzbnWHKEZP9Yjg712N5kMmP4QzS9iC9\\\",\\\"ztfaW34Gj9FrnGUEf833ywDVL62NWXBM81u6EQnM6VR45eYnXhwztecW1SjxA7JrmAXKJhxhj3vDNEpVCQoSvVoSpmbhtjf\\\"]\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_listunspent\", \"params\": [6 9999999 false \"[\\\"ztbx5DLDxa5ZLFTchHhoPNkKs57QzSyib6UqXpEdy76T1aUdFxJt1w9318Z8DJ73XzbnWHKEZP9Yjg712N5kMmP4QzS9iC9\\\",\\\"ztfaW34Gj9FrnGUEf833ywDVL62NWXBM81u6EQnM6VR45eYnXhwztecW1SjxA7JrmAXKJhxhj3vDNEpVCQoSvVoSpmbhtjf\\\"]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"z_mergetoaddress","args":"[\"fromaddress\", ... ] \"toaddress\" ( fee ) ( transparent_limit ) ( shielded_limit ) ( memo )","summary":"Merge multiple UTXOs and notes into a single UTXO or note.  Coinbase UTXOs are ignored; use `z_shieldcoinbase`to combine those into a single note.","help":"z_mergetoaddress [\"fromaddress\", ... ] \"toaddress\" ( fee ) ( transparent_limit ) ( shielded_limit ) ( memo )\n\nMerge multiple UTXOs and notes into a single UTXO or note.  Coinbase UTXOs are ignored; use `z_shieldcoinbase`\nto combine those into a single note.\n\nThis is an asynchronous operation, and UTXOs selected for merging will be locked.  If there is an error, they\nare unlocked.  The RPC call `listlockunspent` can be used to return a list of locked UTXOs.\n\nThe number of UTXOs and notes selected for merging can be limited by the caller.  If the transparent limit\nparameter is set to zero will mean limit the number of UTXOs based on the size of the transaction.  Any limit is\nconstrained by the consensus rule defining a maximum transaction size of 100000 bytes before Sapling, and 2000000\nbytes once Sapling activates.\n\nArguments:\n1. fromaddresses         (array, required) A JSON array with addresses.\n                         The following special strings are accepted inside the array:\n                             - \"ANY_TADDR\":   Merge UTXOs from any taddrs belonging to the wallet.\n                             - \"ANY_SPROUT\":  Merge notes from any Sprout zaddrs belonging to the wallet.\n                             - \"ANY_SAPLING\": Merge notes from any Sapling zaddrs belonging to the wallet.\n                         While it is possible to use a variety of different combinations of addresses and the above values,\n                         it is not possible to send funds from both sprout and sapling addresses simultaneously. If a special\n                         string is given, any given addresses of that address type will be counted as duplicates and cause an error.\n    [\n      \"address\"          (string) Can be a taddr or a zaddr\n      ,...\n    ]\n2. \"toaddress\"           (string, required) The taddr or zaddr to send the funds to.\n3. fee                   (numeric, optional, default=0.00001) The fee amount to attach to this transaction.\n4. transparent_limit     (numeric, optional, default=50) Limit on the maximum number of UTXOs to merge.  Set to 0 to use as many as will fit in the transaction.\n5. shielded_limit        (numeric, optional, default=20 Sprout or 200 Sapling Notes) Limit on the maximum number of notes to merge.  Set to 0 to merge as many as will fit in the transaction.\n6. \"memo\"                (string, optional) Encoded as hex. When toaddress is a zaddr, this will be stored in the memo field of the new note.\n\nResult:\n{\n  \"remainingUTXOs\": xxx               (numeric) Number of UTXOs still available for merging.\n  \"remainingTransparentValue\": xxx    (numeric) Value of UTXOs still available for merging.\n  \"remainingNotes\": xxx               (numeric) Number of notes still available for merging.\n  \"remainingShieldedValue\": xxx       (numeric) Value of notes still available for merging.\n  \"mergingUTXOs\": xxx                 (numeric) Number of UTXOs being merged.\n  \"mergingTransparentValue\": xxx      (numeric) Value of UTXOs being merged.\n  \"mergingNotes\": xxx                 (numeric) Number of notes being merged.\n  \"mergingShieldedValue\": xxx         (numeric) Value of notes being merged.\n  \"opid\": xxx                         (string) An operationid to pass to z_getoperationstatus to get the result of the operation.\n}\n\nExamples:\n> zcash-cli z_mergetoaddress '[\"ANY_SAPLING\", \"t1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\"]' ztestsapling19rnyu293v44f0kvtmszhx35lpdug574twc0lwyf4s7w0umtkrdq5nfcauxrxcyfmh3m7slemqsj\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_mergetoaddress\", \"params\": [[\"ANY_SAPLING\", \"t1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\"], \"ztestsapling19rnyu293v44f0kvtmszhx35lpdug574twc0lwyf4s7w0umtkrdq5nfcauxrxcyfmh3m7slemqsj\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"z_sendmany","args":"\"fromaddress\" [{\"address\":... ,\"amount\":...},...] ( minconf ) ( fee ) ( privacyPolicy )","summary":"Send a transaction with multiple recipients. Amounts are decimal numbers with atmost 8 digits of precision. Change generated from one or more transparentaddresses flows to a new transparent address, while change generated from alegacy Sapling address returns to itself. When sending from a unified address,change is returned to the internal-only address for the associated unified account.When spending coinbase UTXOs, only shielded recipients are permitted and change is not allowed;the entire value of the coinbase UTXO(s) must be consumed.","help":"z_sendmany \"fromaddress\" [{\"address\":... ,\"amount\":...},...] ( minconf ) ( fee ) ( privacyPolicy )\n\nSend a transaction with multiple recipients. Amounts are decimal numbers with at\nmost 8 digits of precision. Change generated from one or more transparent\naddresses flows to a new transparent address, while change generated from a\nlegacy Sapling address returns to itself. When sending from a unified address,\nchange is returned to the internal-only address for the associated unified account.\nWhen spending coinbase UTXOs, only shielded recipients are permitted and change is not allowed;\nthe entire value of the coinbase UTXO(s) must be consumed.\n\nArguments:\n1. \"fromaddress\"         (string, required) The transparent or shielded address to send the funds from.\n                           The following special strings are also accepted:\n                               - \"ANY_TADDR\": Select non-coinbase UTXOs from any transparent addresses belonging to the wallet.\n                                              Use z_shieldcoinbase to shield coinbase UTXOs from multiple transparent addresses.\n                           If a unified address is provided for this argument, the TXOs to be spent will be selected from those\n                           associated with the account corresponding to that unified address, from value pools corresponding\n                           to the receivers included in the UA.\n2. \"amounts\"             (array, required) An array of json objects representing the amounts to send.\n    [{\n      \"address\":address  (string, required) The address is a taddr, zaddr, or Unified Address\n      \"amount\":amount    (numeric, required) The numeric amount in ZEC is the value\n      \"memo\":memo        (string, optional) If the address is a zaddr, raw data represented in hexadecimal string format\n    }, ... ]\n3. minconf               (numeric, optional, default=10) Only use funds confirmed at least this many times.\n4. fee                   (numeric, optional, default=0.00001) The fee amount to attach to this transaction.\n5. privacyPolicy         (string, optional, default=\"LegacyCompat\") Policy for what information leakage is acceptable.\n                         One of the following strings:\n                               - \"FullPrivacy\": Only allow fully-shielded transactions (involving a single shielded value pool).\n                               - \"LegacyCompat\": If the transaction involves any Unified Addresses, this is equivalent to\n                                 \"FullPrivacy\". Otherwise, this is equivalent to \"AllowFullyTransparent\".\n                               - \"AllowRevealedAmounts\": Allow funds to cross between shielded value pools, revealing the amount\n                                 that crosses pools.\n                               - \"AllowRevealedRecipients\": Allow transparent recipients. This also implies revealing\n                                 information described under \"AllowRevealedAmounts\".\n                               - \"AllowRevealedSenders\": Allow transparent funds to be spent, revealing the sending\n                                 addresses and amounts. This implies revealing information described under \"AllowRevealedAmounts\".\n                               - \"AllowFullyTransparent\": Allow transaction to both spend transparent funds and have\n                                 transparent recipients. This implies revealing information described under \"AllowRevealedSenders\"\n                                 and \"AllowRevealedRecipients\".\n                               - \"AllowLinkingAccountAddresses\": Allow selecting transparent coins from the full account,\n                                 rather than just the funds sent to the transparent receiver in the provided Unified Address.\n                                 This implies revealing information described under \"AllowRevealedSenders\".\n                               - \"NoPrivacy\": Allow the transaction to reveal any information necessary to create it.\n                                 This implies revealing information described under \"AllowFullyTransparent\" and\n                                 \"AllowLinkingAccountAddresses\".\n\nResult:\n\"operationid\"          (string) An operationid to pass to z_getoperationstatus to get the result of the operation.\n\nExamples:\n> zcash-cli z_sendmany \"t1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" '[{\"address\": \"ztfaW34Gj9FrnGUEf833ywDVL62NWXBM81u6EQnM6VR45eYnXhwztecW1SjxA7JrmAXKJhxhj3vDNEpVCQoSvVoSpmbhtjf\", \"amount\": 5.0}]'\n> zcash-cli z_sendmany \"ANY_TADDR\" '[{\"address\": \"t1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\", \"amount\": 2.0}]'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_sendmany\", \"params\": [\"t1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\", [{\"address\": \"ztfaW34Gj9FrnGUEf833ywDVL62NWXBM81u6EQnM6VR45eYnXhwztecW1SjxA7JrmAXKJhxhj3vDNEpVCQoSvVoSpmbhtjf\", \"amount\": 5.0}]] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"z_setmigration","args":"enabled","summary":"This migration is designed to minimize information leakage. As a result for wallets with a significantSprout balance, this process may take several weeks. The migration works by sending, up to 5, as manytransactions as possible whenever the blockchain reaches a height equal to 499 modulo 500. The transactionamounts are picked according to the random distribution specified in ZIP 308. The migration will end oncethe wallet’s Sprout balance is below 0.01 ZEC.","help":"z_setmigration enabled\nWhen enabled the Sprout to Sapling migration will attempt to migrate all funds from this wallet’s\nSprout addresses to either the address for Sapling account 0 or the address specified by the parameter\n'-migrationdestaddress'.\n\nThis migration is designed to minimize information leakage. As a result for wallets with a significant\nSprout balance, this process may take several weeks. The migration works by sending, up to 5, as many\ntransactions as possible whenever the blockchain reaches a height equal to 499 modulo 500. The transaction\namounts are picked according to the random distribution specified in ZIP 308. The migration will end once\nthe wallet’s Sprout balance is below 0.01 ZEC.\n\nArguments:\n1. enabled  (boolean, required) 'true' or 'false' to enable or disable respectively.\n\n","deprecated":false},{"name":"z_shieldcoinbase","args":"\"fromaddress\" \"tozaddress\" ( fee ) ( limit )","summary":"Shield transparent coinbase funds by sending to a shielded zaddr.  This is an asynchronous operation and utxosselected for shielding will be locked.  If there is an error, they are unlocked.  The RPC call `listlockunspent`can be used to return a list of locked utxos.  The number of coinbase utxos selected for shielding can be limitedby the caller. Any limit is constrained by the consensus rule defining a maximumtransaction size of 100000 bytes before Sapling, and 2000000 bytes once Sapling activates.","help":"z_shieldcoinbase \"fromaddress\" \"tozaddress\" ( fee ) ( limit )\n\nShield transparent coinbase funds by sending to a shielded zaddr.  This is an asynchronous operation and utxos\nselected for shielding will be locked.  If there is an error, they are unlocked.  The RPC call `listlockunspent`\ncan be used to return a list of locked utxos.  The number of coinbase utxos selected for shielding can be limited\nby the caller. Any limit is constrained by the consensus rule defining a maximum\ntransaction size of 100000 bytes before Sapling, and 2000000 bytes once Sapling activates.\n\nArguments:\n1. \"fromaddress\"         (string, required) The address is a taddr or \"*\" for all taddrs belonging to the wallet.\n2. \"toaddress\"           (string, required) The address is a zaddr.\n3. fee                   (numeric, optional, default=0.00001) The fee amount to attach to this transaction.\n4. limit                 (numeric, optional, default=50) Limit on the maximum number of utxos to shield.  Set to 0 to use as many as will fit in the transaction.\n\nResult:\n{\n  \"remainingUTXOs\": xxx       (numeric) Number of coinbase utxos still available for shielding.\n  \"remainingValue\": xxx       (numeric) Value of coinbase utxos still available for shielding.\n  \"shieldingUTXOs\": xxx        (numeric) Number of coinbase utxos being shielded.\n  \"shieldingValue\": xxx        (numeric) Value of coinbase utxos being shielded.\n  \"opid\": xxx          (string) An operationid to pass to z_getoperationstatus to get the result of the operation.\n}\n\nExamples:\n> zcash-cli z_shieldcoinbase \"t1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" \"ztfaW34Gj9FrnGUEf833ywDVL62NWXBM81u6EQnM6VR45eYnXhwztecW1SjxA7JrmAXKJhxhj3vDNEpVCQoSvVoSpmbhtjf\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_shieldcoinbase\", \"params\": [\"t1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\", \"ztfaW34Gj9FrnGUEf833ywDVL62NWXBM81u6EQnM6VR45eYnXhwztecW1SjxA7JrmAXKJhxhj3vDNEpVCQoSvVoSpmbhtjf\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"z_viewtransaction","args":"\"txid\"","summary":"Get detailed shielded information about in-wallet transaction <txid>","help":"z_viewtransaction \"txid\"\n\nGet detailed shielded information about in-wallet transaction <txid>\n\nArguments:\n1. \"txid\"    (string, required) The transaction id\n\nResult:\n{\n  \"txid\" : \"transactionid\",   (string) The transaction id\n  \"spends\" : [\n    {\n      \"pool\" : \"sprout|sapling|orchard\",      (string) The shielded value pool\n      \"type\" : \"sprout|sapling|orchard\",      (string) The shielded value pool (DEPRECATED legacy attribute)\n      \"js\" : n,                       (numeric, sprout) the index of the JSDescription within vJoinSplit\n      \"jsSpend\" : n,                  (numeric, sprout) the index of the spend within the JSDescription\n      \"spend\" : n,                    (numeric, sapling) the index of the spend within vShieldedSpend\n      \"action\" : n,                   (numeric, orchard) the index of the action within orchard bundle\n      \"txidPrev\" : \"transactionid\",   (string) The id for the transaction this note was created in\n      \"jsPrev\" : n,                   (numeric, sprout) the index of the JSDescription within vJoinSplit\n      \"jsOutputPrev\" : n,             (numeric, sprout) the index of the output within the JSDescription\n      \"outputPrev\" : n,               (numeric, sapling) the index of the output within the vShieldedOutput\n      \"actionPrev\" : n,               (numeric, orchard) the index of the action within the orchard bundle\n      \"address\" : \"zcashaddress\",     (string) The Zcash address involved in the transaction\n      \"value\" : x.xxx                 (numeric) The amount in ZEC\n      \"valueZat\" : xxxx               (numeric) The amount in zatoshis\n    }\n    ,...\n  ],\n  \"outputs\" : [\n    {\n      \"pool\" : \"sprout|sapling|orchard\",      (string) The shielded value pool\n      \"type\" : \"sprout|sapling|orchard\",      (string) The shielded value pool (DEPRECATED legacy attribute)\n      \"js\" : n,                       (numeric, sprout) the index of the JSDescription within vJoinSplit\n      \"jsOutput\" : n,                 (numeric, sprout) the index of the output within the JSDescription\n      \"output\" : n,                   (numeric, sapling) the index of the output within the vShieldedOutput\n      \"action\" : n,                   (numeric, orchard) the index of the action within the orchard bundle\n      \"address\" : \"zcashaddress\",     (string) The Zcash address involved in the transaction. Not included for change outputs.\n      \"outgoing\" : true|false         (boolean) True if the output is not for an address in the wallet\n      \"walletInternal\" : true|false   (boolean) True if this is a change output.\n      \"value\" : x.xxx                 (numeric) The amount in ZEC\n      \"valueZat\" : xxxx               (numeric) The amount in zatoshis\n      \"memo\" : \"hexmemo\",             (string) hexadecimal string representation of the memo field\n      \"memoStr\" : \"memo\",             (string) Only returned if memo contains valid UTF-8 text.\n    }\n    ,...\n  ],\n}\n\nExamples:\n> zcash-cli z_viewtransaction \"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_viewtransaction\", \"params\": [\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8232/\n\n","deprecated":false},{"name":"zcbenchmark","args":"benchmarktype samplecount","summary":"Runs a benchmark of the selected benchmark type samplecount times,returning the running times of each sample.","help":"zcbenchmark benchmarktype samplecount\n\nRuns a benchmark of the selected benchmark type samplecount times,\nreturning the running times of each sample.\n\nOutput: [\n  {\n    \"runningtime\": runningtime\n  },\n  {\n    \"runningtime\": runningtime\n  }\n  ...\n]\n\n","deprecated":false},{"name":"zcsamplejoinsplit","args":"","summary":"Perform a joinsplit and return the JSDescription.","help":"zcsamplejoinsplit\n\nPerform a joinsplit and return the JSDescription.\n\n","deprecated":false}]}]